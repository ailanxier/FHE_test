// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/openfhe_ckks.proto

#include "openfhe_ckks.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace OpenFHE {
PROTOBUF_CONSTEXPR OpenFHE_RootMsg::OpenFHE_RootMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.param_)*/nullptr
  , /*decltype(_impl_.evaldata_)*/nullptr
  , /*decltype(_impl_.apisequence_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OpenFHE_RootMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpenFHE_RootMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpenFHE_RootMsgDefaultTypeInternal() {}
  union {
    OpenFHE_RootMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpenFHE_RootMsgDefaultTypeInternal _OpenFHE_RootMsg_default_instance_;
PROTOBUF_CONSTEXPR FHEParameter::FHEParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rotateindexes_)*/{}
  , /*decltype(_impl_._rotateindexes_cached_byte_size_)*/{0}
  , /*decltype(_impl_.plaintextmodulus_)*/uint64_t{0u}
  , /*decltype(_impl_.multiplicativedepth_)*/0u
  , /*decltype(_impl_.batchsize_)*/0u
  , /*decltype(_impl_.digitsize_)*/0u
  , /*decltype(_impl_.standarddeviation_)*/0
  , /*decltype(_impl_.secretkeydist_)*/0
  , /*decltype(_impl_.maxrelinskdeg_)*/0u
  , /*decltype(_impl_.kstech_)*/0
  , /*decltype(_impl_.scaltech_)*/0
  , /*decltype(_impl_.firstmodsize_)*/0u
  , /*decltype(_impl_.scalingmodsize_)*/0u
  , /*decltype(_impl_.numlargedigits_)*/0u
  , /*decltype(_impl_.securitylevel_)*/0
  , /*decltype(_impl_.ringdim_)*/0u
  , /*decltype(_impl_.evaladdcount_)*/0u
  , /*decltype(_impl_.keyswitchcount_)*/0u
  , /*decltype(_impl_.encryptiontechnique_)*/0
  , /*decltype(_impl_.multiplicationtechnique_)*/0
  , /*decltype(_impl_.multihopmodsize_)*/0u
  , /*decltype(_impl_.premode_)*/0
  , /*decltype(_impl_.multipartymode_)*/0
  , /*decltype(_impl_.noiseestimate_)*/0
  , /*decltype(_impl_.desiredprecision_)*/0
  , /*decltype(_impl_.statisticalsecurity_)*/0
  , /*decltype(_impl_.numadversarialqueries_)*/0
  , /*decltype(_impl_.pre_)*/false
  , /*decltype(_impl_.multiparty_)*/false
  , /*decltype(_impl_.fhe_)*/false} {}
struct FHEParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FHEParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FHEParameterDefaultTypeInternal() {}
  union {
    FHEParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FHEParameterDefaultTypeInternal _FHEParameter_default_instance_;
PROTOBUF_CONSTEXPR EvalData_OneDataList::EvalData_OneDataList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datalist_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EvalData_OneDataListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EvalData_OneDataListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EvalData_OneDataListDefaultTypeInternal() {}
  union {
    EvalData_OneDataList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EvalData_OneDataListDefaultTypeInternal _EvalData_OneDataList_default_instance_;
PROTOBUF_CONSTEXPR EvalData::EvalData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.alldatalists_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EvalDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EvalDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EvalDataDefaultTypeInternal() {}
  union {
    EvalData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EvalDataDefaultTypeInternal _EvalData_default_instance_;
PROTOBUF_CONSTEXPR APISequence_OneAPI_AddTwoList::APISequence_OneAPI_AddTwoList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src1_)*/0u
  , /*decltype(_impl_.src2_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct APISequence_OneAPI_AddTwoListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR APISequence_OneAPI_AddTwoListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~APISequence_OneAPI_AddTwoListDefaultTypeInternal() {}
  union {
    APISequence_OneAPI_AddTwoList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 APISequence_OneAPI_AddTwoListDefaultTypeInternal _APISequence_OneAPI_AddTwoList_default_instance_;
PROTOBUF_CONSTEXPR APISequence_OneAPI_AddConstant::APISequence_OneAPI_AddConstant(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.num_)*/0
  , /*decltype(_impl_.src_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct APISequence_OneAPI_AddConstantDefaultTypeInternal {
  PROTOBUF_CONSTEXPR APISequence_OneAPI_AddConstantDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~APISequence_OneAPI_AddConstantDefaultTypeInternal() {}
  union {
    APISequence_OneAPI_AddConstant _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 APISequence_OneAPI_AddConstantDefaultTypeInternal _APISequence_OneAPI_AddConstant_default_instance_;
PROTOBUF_CONSTEXPR APISequence_OneAPI_AddManyList::APISequence_OneAPI_AddManyList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.srcs_)*/{}
  , /*decltype(_impl_._srcs_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct APISequence_OneAPI_AddManyListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR APISequence_OneAPI_AddManyListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~APISequence_OneAPI_AddManyListDefaultTypeInternal() {}
  union {
    APISequence_OneAPI_AddManyList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 APISequence_OneAPI_AddManyListDefaultTypeInternal _APISequence_OneAPI_AddManyList_default_instance_;
PROTOBUF_CONSTEXPR APISequence_OneAPI_SubTwoList::APISequence_OneAPI_SubTwoList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src1_)*/0u
  , /*decltype(_impl_.src2_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct APISequence_OneAPI_SubTwoListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR APISequence_OneAPI_SubTwoListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~APISequence_OneAPI_SubTwoListDefaultTypeInternal() {}
  union {
    APISequence_OneAPI_SubTwoList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 APISequence_OneAPI_SubTwoListDefaultTypeInternal _APISequence_OneAPI_SubTwoList_default_instance_;
PROTOBUF_CONSTEXPR APISequence_OneAPI_SubConstant::APISequence_OneAPI_SubConstant(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.num_)*/0
  , /*decltype(_impl_.src_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct APISequence_OneAPI_SubConstantDefaultTypeInternal {
  PROTOBUF_CONSTEXPR APISequence_OneAPI_SubConstantDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~APISequence_OneAPI_SubConstantDefaultTypeInternal() {}
  union {
    APISequence_OneAPI_SubConstant _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 APISequence_OneAPI_SubConstantDefaultTypeInternal _APISequence_OneAPI_SubConstant_default_instance_;
PROTOBUF_CONSTEXPR APISequence_OneAPI_MulTwoList::APISequence_OneAPI_MulTwoList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src1_)*/0u
  , /*decltype(_impl_.src2_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct APISequence_OneAPI_MulTwoListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR APISequence_OneAPI_MulTwoListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~APISequence_OneAPI_MulTwoListDefaultTypeInternal() {}
  union {
    APISequence_OneAPI_MulTwoList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 APISequence_OneAPI_MulTwoListDefaultTypeInternal _APISequence_OneAPI_MulTwoList_default_instance_;
PROTOBUF_CONSTEXPR APISequence_OneAPI_MulConstant::APISequence_OneAPI_MulConstant(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.num_)*/0
  , /*decltype(_impl_.src_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct APISequence_OneAPI_MulConstantDefaultTypeInternal {
  PROTOBUF_CONSTEXPR APISequence_OneAPI_MulConstantDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~APISequence_OneAPI_MulConstantDefaultTypeInternal() {}
  union {
    APISequence_OneAPI_MulConstant _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 APISequence_OneAPI_MulConstantDefaultTypeInternal _APISequence_OneAPI_MulConstant_default_instance_;
PROTOBUF_CONSTEXPR APISequence_OneAPI_MulManyList::APISequence_OneAPI_MulManyList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.srcs_)*/{}
  , /*decltype(_impl_._srcs_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct APISequence_OneAPI_MulManyListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR APISequence_OneAPI_MulManyListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~APISequence_OneAPI_MulManyListDefaultTypeInternal() {}
  union {
    APISequence_OneAPI_MulManyList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 APISequence_OneAPI_MulManyListDefaultTypeInternal _APISequence_OneAPI_MulManyList_default_instance_;
PROTOBUF_CONSTEXPR APISequence_OneAPI_LinearWeightedSum::APISequence_OneAPI_LinearWeightedSum(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.srcs_)*/{}
  , /*decltype(_impl_._srcs_cached_byte_size_)*/{0}
  , /*decltype(_impl_.weights_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct APISequence_OneAPI_LinearWeightedSumDefaultTypeInternal {
  PROTOBUF_CONSTEXPR APISequence_OneAPI_LinearWeightedSumDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~APISequence_OneAPI_LinearWeightedSumDefaultTypeInternal() {}
  union {
    APISequence_OneAPI_LinearWeightedSum _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 APISequence_OneAPI_LinearWeightedSumDefaultTypeInternal _APISequence_OneAPI_LinearWeightedSum_default_instance_;
PROTOBUF_CONSTEXPR APISequence_OneAPI_RotateOneList::APISequence_OneAPI_RotateOneList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src_)*/0u
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct APISequence_OneAPI_RotateOneListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR APISequence_OneAPI_RotateOneListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~APISequence_OneAPI_RotateOneListDefaultTypeInternal() {}
  union {
    APISequence_OneAPI_RotateOneList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 APISequence_OneAPI_RotateOneListDefaultTypeInternal _APISequence_OneAPI_RotateOneList_default_instance_;
PROTOBUF_CONSTEXPR APISequence_OneAPI::APISequence_OneAPI(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dst_)*/0u
  , /*decltype(_impl_.api_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct APISequence_OneAPIDefaultTypeInternal {
  PROTOBUF_CONSTEXPR APISequence_OneAPIDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~APISequence_OneAPIDefaultTypeInternal() {}
  union {
    APISequence_OneAPI _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 APISequence_OneAPIDefaultTypeInternal _APISequence_OneAPI_default_instance_;
PROTOBUF_CONSTEXPR APISequence::APISequence(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.apilist_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct APISequenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR APISequenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~APISequenceDefaultTypeInternal() {}
  union {
    APISequence _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 APISequenceDefaultTypeInternal _APISequence_default_instance_;
}  // namespace OpenFHE
static ::_pb::Metadata file_level_metadata_proto_2fopenfhe_5fckks_2eproto[16];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_proto_2fopenfhe_5fckks_2eproto[10];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto_2fopenfhe_5fckks_2eproto = nullptr;

const uint32_t TableStruct_proto_2fopenfhe_5fckks_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::OpenFHE_RootMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::OpenFHE_RootMsg, _impl_.param_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::OpenFHE_RootMsg, _impl_.evaldata_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::OpenFHE_RootMsg, _impl_.apisequence_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _impl_.multiplicativedepth_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _impl_.plaintextmodulus_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _impl_.batchsize_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _impl_.digitsize_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _impl_.standarddeviation_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _impl_.secretkeydist_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _impl_.maxrelinskdeg_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _impl_.kstech_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _impl_.scaltech_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _impl_.firstmodsize_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _impl_.scalingmodsize_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _impl_.numlargedigits_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _impl_.securitylevel_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _impl_.ringdim_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _impl_.evaladdcount_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _impl_.keyswitchcount_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _impl_.encryptiontechnique_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _impl_.multiplicationtechnique_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _impl_.multihopmodsize_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _impl_.premode_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _impl_.multipartymode_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _impl_.noiseestimate_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _impl_.desiredprecision_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _impl_.statisticalsecurity_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _impl_.numadversarialqueries_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _impl_.pre_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _impl_.multiparty_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _impl_.fhe_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::FHEParameter, _impl_.rotateindexes_),
  0,
  ~0u,
  1,
  ~0u,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  9,
  ~0u,
  10,
  11,
  ~0u,
  12,
  13,
  14,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::EvalData_OneDataList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::EvalData_OneDataList, _impl_.datalist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::EvalData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::EvalData, _impl_.alldatalists_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI_AddTwoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI_AddTwoList, _impl_.src1_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI_AddTwoList, _impl_.src2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI_AddConstant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI_AddConstant, _impl_.src_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI_AddConstant, _impl_.num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI_AddManyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI_AddManyList, _impl_.srcs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI_SubTwoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI_SubTwoList, _impl_.src1_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI_SubTwoList, _impl_.src2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI_SubConstant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI_SubConstant, _impl_.src_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI_SubConstant, _impl_.num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI_MulTwoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI_MulTwoList, _impl_.src1_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI_MulTwoList, _impl_.src2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI_MulConstant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI_MulConstant, _impl_.src_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI_MulConstant, _impl_.num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI_MulManyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI_MulManyList, _impl_.srcs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI_LinearWeightedSum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI_LinearWeightedSum, _impl_.srcs_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI_LinearWeightedSum, _impl_.weights_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI_RotateOneList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI_RotateOneList, _impl_.src_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI_RotateOneList, _impl_.index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI, _impl_.dst_),
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence_OneAPI, _impl_.api_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OpenFHE::APISequence, _impl_.apilist_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::OpenFHE::OpenFHE_RootMsg)},
  { 9, 44, -1, sizeof(::OpenFHE::FHEParameter)},
  { 73, -1, -1, sizeof(::OpenFHE::EvalData_OneDataList)},
  { 80, -1, -1, sizeof(::OpenFHE::EvalData)},
  { 87, -1, -1, sizeof(::OpenFHE::APISequence_OneAPI_AddTwoList)},
  { 95, -1, -1, sizeof(::OpenFHE::APISequence_OneAPI_AddConstant)},
  { 103, -1, -1, sizeof(::OpenFHE::APISequence_OneAPI_AddManyList)},
  { 110, -1, -1, sizeof(::OpenFHE::APISequence_OneAPI_SubTwoList)},
  { 118, -1, -1, sizeof(::OpenFHE::APISequence_OneAPI_SubConstant)},
  { 126, -1, -1, sizeof(::OpenFHE::APISequence_OneAPI_MulTwoList)},
  { 134, -1, -1, sizeof(::OpenFHE::APISequence_OneAPI_MulConstant)},
  { 142, -1, -1, sizeof(::OpenFHE::APISequence_OneAPI_MulManyList)},
  { 149, -1, -1, sizeof(::OpenFHE::APISequence_OneAPI_LinearWeightedSum)},
  { 157, -1, -1, sizeof(::OpenFHE::APISequence_OneAPI_RotateOneList)},
  { 165, -1, -1, sizeof(::OpenFHE::APISequence_OneAPI)},
  { 183, -1, -1, sizeof(::OpenFHE::APISequence)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::OpenFHE::_OpenFHE_RootMsg_default_instance_._instance,
  &::OpenFHE::_FHEParameter_default_instance_._instance,
  &::OpenFHE::_EvalData_OneDataList_default_instance_._instance,
  &::OpenFHE::_EvalData_default_instance_._instance,
  &::OpenFHE::_APISequence_OneAPI_AddTwoList_default_instance_._instance,
  &::OpenFHE::_APISequence_OneAPI_AddConstant_default_instance_._instance,
  &::OpenFHE::_APISequence_OneAPI_AddManyList_default_instance_._instance,
  &::OpenFHE::_APISequence_OneAPI_SubTwoList_default_instance_._instance,
  &::OpenFHE::_APISequence_OneAPI_SubConstant_default_instance_._instance,
  &::OpenFHE::_APISequence_OneAPI_MulTwoList_default_instance_._instance,
  &::OpenFHE::_APISequence_OneAPI_MulConstant_default_instance_._instance,
  &::OpenFHE::_APISequence_OneAPI_MulManyList_default_instance_._instance,
  &::OpenFHE::_APISequence_OneAPI_LinearWeightedSum_default_instance_._instance,
  &::OpenFHE::_APISequence_OneAPI_RotateOneList_default_instance_._instance,
  &::OpenFHE::_APISequence_OneAPI_default_instance_._instance,
  &::OpenFHE::_APISequence_default_instance_._instance,
};

const char descriptor_table_protodef_proto_2fopenfhe_5fckks_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030proto/openfhe_ckks.proto\022\007OpenFHE\"\207\001\n\017"
  "OpenFHE_RootMsg\022$\n\005param\030\001 \001(\0132\025.OpenFHE"
  ".FHEParameter\022#\n\010evalData\030\002 \001(\0132\021.OpenFH"
  "E.EvalData\022)\n\013apiSequence\030\003 \001(\0132\024.OpenFH"
  "E.APISequence\"\356\t\n\014FHEParameter\022 \n\023multip"
  "licativeDepth\030\001 \001(\rH\000\210\001\001\022\030\n\020plaintextMod"
  "ulus\030\002 \001(\004\022\026\n\tbatchSize\030\003 \001(\rH\001\210\001\001\022\021\n\tdi"
  "gitSize\030\004 \001(\r\022\036\n\021standardDeviation\030\005 \001(\002"
  "H\002\210\001\001\0222\n\rsecretKeyDist\030\006 \001(\0162\026.OpenFHE.S"
  "ecretKeyDistH\003\210\001\001\022\032\n\rmaxRelinSkDeg\030\007 \001(\r"
  "H\004\210\001\001\0220\n\006ksTech\030\010 \001(\0162\033.OpenFHE.KeySwitc"
  "hTechniqueH\005\210\001\001\0220\n\010scalTech\030\t \001(\0162\031.Open"
  "FHE.ScalingTechniqueH\006\210\001\001\022\031\n\014firstModSiz"
  "e\030\n \001(\rH\007\210\001\001\022\033\n\016scalingModSize\030\013 \001(\rH\010\210\001"
  "\001\022\026\n\016numLargeDigits\030\014 \001(\r\022-\n\rsecurityLev"
  "el\030\r \001(\0162\026.OpenFHE.SecurityLevel\022\017\n\007ring"
  "Dim\030\016 \001(\r\022\024\n\014evalAddCount\030\017 \001(\r\022\026\n\016keySw"
  "itchCount\030\020 \001(\r\0229\n\023encryptionTechnique\030\021"
  " \001(\0162\034.OpenFHE.EncryptionTechnique\022F\n\027mu"
  "ltiplicationTechnique\030\022 \001(\0162 .OpenFHE.Mu"
  "ltiplicationTechniqueH\t\210\001\001\022\027\n\017multiHopMo"
  "dSize\030\023 \001(\r\0224\n\007PREMode\030\024 \001(\0162\036.OpenFHE.P"
  "roxyReEncryptionModeH\n\210\001\001\0224\n\016multipartyM"
  "ode\030\025 \001(\0162\027.OpenFHE.MultipartyModeH\013\210\001\001\022"
  "\025\n\rnoiseEstimate\030\030 \001(\001\022\035\n\020desiredPrecisi"
  "on\030\031 \001(\001H\014\210\001\001\022 \n\023statisticalSecurity\030\032 \001"
  "(\001H\r\210\001\001\022\"\n\025numAdversarialQueries\030\033 \001(\001H\016"
  "\210\001\001\022\013\n\003PRE\030\036 \001(\010\022\022\n\nMULTIPARTY\030! \001(\010\022\013\n\003"
  "FHE\030\" \001(\010\022\025\n\rrotateIndexes\030# \003(\005B\026\n\024_mul"
  "tiplicativeDepthB\014\n\n_batchSizeB\024\n\022_stand"
  "ardDeviationB\020\n\016_secretKeyDistB\020\n\016_maxRe"
  "linSkDegB\t\n\007_ksTechB\013\n\t_scalTechB\017\n\r_fir"
  "stModSizeB\021\n\017_scalingModSizeB\032\n\030_multipl"
  "icationTechniqueB\n\n\010_PREModeB\021\n\017_multipa"
  "rtyModeB\023\n\021_desiredPrecisionB\026\n\024_statist"
  "icalSecurityB\030\n\026_numAdversarialQueries\"`"
  "\n\010EvalData\0223\n\014allDataLists\030\002 \003(\0132\035.OpenF"
  "HE.EvalData.OneDataList\032\037\n\013OneDataList\022\020"
  "\n\010dataList\030\001 \003(\001\"\370\010\n\013APISequence\022,\n\007apiL"
  "ist\030\001 \003(\0132\033.OpenFHE.APISequence.OneAPI\032\272"
  "\010\n\006OneAPI\022<\n\naddTwoList\030\001 \001(\0132&.OpenFHE."
  "APISequence.OneAPI.AddTwoListH\000\022>\n\013addCo"
  "nstant\030\002 \001(\0132\'.OpenFHE.APISequence.OneAP"
  "I.AddConstantH\000\022>\n\013addManyList\030\003 \001(\0132\'.O"
  "penFHE.APISequence.OneAPI.AddManyListH\000\022"
  "<\n\nsubTwoList\030\004 \001(\0132&.OpenFHE.APISequenc"
  "e.OneAPI.SubTwoListH\000\022>\n\013subConstant\030\005 \001"
  "(\0132\'.OpenFHE.APISequence.OneAPI.SubConst"
  "antH\000\022<\n\nmulTwoList\030\006 \001(\0132&.OpenFHE.APIS"
  "equence.OneAPI.MulTwoListH\000\022>\n\013mulConsta"
  "nt\030\007 \001(\0132\'.OpenFHE.APISequence.OneAPI.Mu"
  "lConstantH\000\022>\n\013mulManyList\030\010 \001(\0132\'.OpenF"
  "HE.APISequence.OneAPI.MulManyListH\000\022J\n\021l"
  "inearWeightedSum\030\t \001(\0132-.OpenFHE.APISequ"
  "ence.OneAPI.LinearWeightedSumH\000\022B\n\rrotat"
  "eOneList\030\n \001(\0132).OpenFHE.APISequence.One"
  "API.RotateOneListH\000\022\013\n\003dst\030\013 \001(\r\032(\n\nAddT"
  "woList\022\014\n\004src1\030\001 \001(\r\022\014\n\004src2\030\002 \001(\r\032\'\n\013Ad"
  "dConstant\022\013\n\003src\030\001 \001(\r\022\013\n\003num\030\002 \001(\001\032\033\n\013A"
  "ddManyList\022\014\n\004srcs\030\001 \003(\r\032(\n\nSubTwoList\022\014"
  "\n\004src1\030\001 \001(\r\022\014\n\004src2\030\002 \001(\r\032\'\n\013SubConstan"
  "t\022\013\n\003src\030\001 \001(\r\022\013\n\003num\030\002 \001(\001\032(\n\nMulTwoLis"
  "t\022\014\n\004src1\030\001 \001(\r\022\014\n\004src2\030\002 \001(\r\032\'\n\013MulCons"
  "tant\022\013\n\003src\030\001 \001(\r\022\013\n\003num\030\002 \001(\001\032\033\n\013MulMan"
  "yList\022\014\n\004srcs\030\001 \003(\r\0322\n\021LinearWeightedSum"
  "\022\014\n\004srcs\030\001 \003(\r\022\017\n\007weights\030\002 \003(\001\032+\n\rRotat"
  "eOneList\022\013\n\003src\030\001 \001(\r\022\r\n\005index\030\002 \001(\005B\005\n\003"
  "api*F\n\rSecretKeyDist\022\014\n\010GAUSSIAN\020\000\022\023\n\017UN"
  "IFORM_TERNARY\020\001\022\022\n\016SPARSE_TERNARY\020\002*\202\001\n\020"
  "ScalingTechnique\022\017\n\013FIXEDMANUAL\020\000\022\r\n\tFIX"
  "EDAUTO\020\001\022\020\n\014FLEXIBLEAUTO\020\002\022\023\n\017FLEXIBLEAU"
  "TOEXT\020\003\022\r\n\tNORESCALE\020\004\022\030\n\024INVALID_RS_TEC"
  "HNIQUE\020\005*=\n\022KeySwitchTechnique\022\023\n\017INVALI"
  "D_KS_TECH\020\000\022\006\n\002BV\020\001\022\n\n\006HYBRID\020\002*f\n\rSecur"
  "ityLevel\022\025\n\021HEStd_128_classic\020\000\022\025\n\021HEStd"
  "_192_classic\020\001\022\025\n\021HEStd_256_classic\020\002\022\020\n"
  "\014HEStd_NotSet\020\003*1\n\023EncryptionTechnique\022\014"
  "\n\010STANDARD\020\000\022\014\n\010EXTENDED\020\001*Q\n\027Multiplica"
  "tionTechnique\022\010\n\004BEHZ\020\000\022\007\n\003HPS\020\001\022\r\n\tHPSP"
  "OVERQ\020\002\022\024\n\020HPSPOVERQLEVELED\020\003*w\n\025ProxyRe"
  "EncryptionMode\022\013\n\007NOT_SET\020\000\022\n\n\006INDCPA\020\001\022"
  "\023\n\017FIXED_NOISE_HRA\020\002\022\026\n\022NOISE_FLOODING_H"
  "RA\020\003\022\030\n\024DIVIDE_AND_ROUND_HRA\020\004*\?\n\rExecut"
  "ionMode\022\023\n\017EXEC_EVALUATION\020\000\022\031\n\025EXEC_NOI"
  "SE_ESTIMATION\020\001*J\n\023DecryptionNoiseMode\022\027"
  "\n\023FIXED_NOISE_DECRYPT\020\000\022\032\n\026NOISE_FLOODIN"
  "G_DECRYPT\020\001*h\n\016MultipartyMode\022\033\n\027INVALID"
  "_MULTIPARTY_MODE\020\000\022\032\n\026FIXED_NOISE_MULTIP"
  "ARTY\020\001\022\035\n\031NOISE_FLOODING_MULTIPARTY\020\002b\006p"
  "roto3"
  ;
static ::_pbi::once_flag descriptor_table_proto_2fopenfhe_5fckks_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2fopenfhe_5fckks_2eproto = {
    false, false, 3565, descriptor_table_protodef_proto_2fopenfhe_5fckks_2eproto,
    "proto/openfhe_ckks.proto",
    &descriptor_table_proto_2fopenfhe_5fckks_2eproto_once, nullptr, 0, 16,
    schemas, file_default_instances, TableStruct_proto_2fopenfhe_5fckks_2eproto::offsets,
    file_level_metadata_proto_2fopenfhe_5fckks_2eproto, file_level_enum_descriptors_proto_2fopenfhe_5fckks_2eproto,
    file_level_service_descriptors_proto_2fopenfhe_5fckks_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2fopenfhe_5fckks_2eproto_getter() {
  return &descriptor_table_proto_2fopenfhe_5fckks_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2fopenfhe_5fckks_2eproto(&descriptor_table_proto_2fopenfhe_5fckks_2eproto);
namespace OpenFHE {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SecretKeyDist_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fopenfhe_5fckks_2eproto);
  return file_level_enum_descriptors_proto_2fopenfhe_5fckks_2eproto[0];
}
bool SecretKeyDist_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScalingTechnique_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fopenfhe_5fckks_2eproto);
  return file_level_enum_descriptors_proto_2fopenfhe_5fckks_2eproto[1];
}
bool ScalingTechnique_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KeySwitchTechnique_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fopenfhe_5fckks_2eproto);
  return file_level_enum_descriptors_proto_2fopenfhe_5fckks_2eproto[2];
}
bool KeySwitchTechnique_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SecurityLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fopenfhe_5fckks_2eproto);
  return file_level_enum_descriptors_proto_2fopenfhe_5fckks_2eproto[3];
}
bool SecurityLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EncryptionTechnique_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fopenfhe_5fckks_2eproto);
  return file_level_enum_descriptors_proto_2fopenfhe_5fckks_2eproto[4];
}
bool EncryptionTechnique_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MultiplicationTechnique_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fopenfhe_5fckks_2eproto);
  return file_level_enum_descriptors_proto_2fopenfhe_5fckks_2eproto[5];
}
bool MultiplicationTechnique_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProxyReEncryptionMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fopenfhe_5fckks_2eproto);
  return file_level_enum_descriptors_proto_2fopenfhe_5fckks_2eproto[6];
}
bool ProxyReEncryptionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExecutionMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fopenfhe_5fckks_2eproto);
  return file_level_enum_descriptors_proto_2fopenfhe_5fckks_2eproto[7];
}
bool ExecutionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DecryptionNoiseMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fopenfhe_5fckks_2eproto);
  return file_level_enum_descriptors_proto_2fopenfhe_5fckks_2eproto[8];
}
bool DecryptionNoiseMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MultipartyMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fopenfhe_5fckks_2eproto);
  return file_level_enum_descriptors_proto_2fopenfhe_5fckks_2eproto[9];
}
bool MultipartyMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class OpenFHE_RootMsg::_Internal {
 public:
  static const ::OpenFHE::FHEParameter& param(const OpenFHE_RootMsg* msg);
  static const ::OpenFHE::EvalData& evaldata(const OpenFHE_RootMsg* msg);
  static const ::OpenFHE::APISequence& apisequence(const OpenFHE_RootMsg* msg);
};

const ::OpenFHE::FHEParameter&
OpenFHE_RootMsg::_Internal::param(const OpenFHE_RootMsg* msg) {
  return *msg->_impl_.param_;
}
const ::OpenFHE::EvalData&
OpenFHE_RootMsg::_Internal::evaldata(const OpenFHE_RootMsg* msg) {
  return *msg->_impl_.evaldata_;
}
const ::OpenFHE::APISequence&
OpenFHE_RootMsg::_Internal::apisequence(const OpenFHE_RootMsg* msg) {
  return *msg->_impl_.apisequence_;
}
OpenFHE_RootMsg::OpenFHE_RootMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:OpenFHE.OpenFHE_RootMsg)
}
OpenFHE_RootMsg::OpenFHE_RootMsg(const OpenFHE_RootMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpenFHE_RootMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.param_){nullptr}
    , decltype(_impl_.evaldata_){nullptr}
    , decltype(_impl_.apisequence_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_param()) {
    _this->_impl_.param_ = new ::OpenFHE::FHEParameter(*from._impl_.param_);
  }
  if (from._internal_has_evaldata()) {
    _this->_impl_.evaldata_ = new ::OpenFHE::EvalData(*from._impl_.evaldata_);
  }
  if (from._internal_has_apisequence()) {
    _this->_impl_.apisequence_ = new ::OpenFHE::APISequence(*from._impl_.apisequence_);
  }
  // @@protoc_insertion_point(copy_constructor:OpenFHE.OpenFHE_RootMsg)
}

inline void OpenFHE_RootMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.param_){nullptr}
    , decltype(_impl_.evaldata_){nullptr}
    , decltype(_impl_.apisequence_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OpenFHE_RootMsg::~OpenFHE_RootMsg() {
  // @@protoc_insertion_point(destructor:OpenFHE.OpenFHE_RootMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpenFHE_RootMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.param_;
  if (this != internal_default_instance()) delete _impl_.evaldata_;
  if (this != internal_default_instance()) delete _impl_.apisequence_;
}

void OpenFHE_RootMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpenFHE_RootMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:OpenFHE.OpenFHE_RootMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.param_ != nullptr) {
    delete _impl_.param_;
  }
  _impl_.param_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.evaldata_ != nullptr) {
    delete _impl_.evaldata_;
  }
  _impl_.evaldata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.apisequence_ != nullptr) {
    delete _impl_.apisequence_;
  }
  _impl_.apisequence_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenFHE_RootMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .OpenFHE.FHEParameter param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .OpenFHE.EvalData evalData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_evaldata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .OpenFHE.APISequence apiSequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_apisequence(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpenFHE_RootMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpenFHE.OpenFHE_RootMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .OpenFHE.FHEParameter param = 1;
  if (this->_internal_has_param()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::param(this),
        _Internal::param(this).GetCachedSize(), target, stream);
  }

  // .OpenFHE.EvalData evalData = 2;
  if (this->_internal_has_evaldata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::evaldata(this),
        _Internal::evaldata(this).GetCachedSize(), target, stream);
  }

  // .OpenFHE.APISequence apiSequence = 3;
  if (this->_internal_has_apisequence()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::apisequence(this),
        _Internal::apisequence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpenFHE.OpenFHE_RootMsg)
  return target;
}

size_t OpenFHE_RootMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OpenFHE.OpenFHE_RootMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .OpenFHE.FHEParameter param = 1;
  if (this->_internal_has_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.param_);
  }

  // .OpenFHE.EvalData evalData = 2;
  if (this->_internal_has_evaldata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.evaldata_);
  }

  // .OpenFHE.APISequence apiSequence = 3;
  if (this->_internal_has_apisequence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.apisequence_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpenFHE_RootMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpenFHE_RootMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpenFHE_RootMsg::GetClassData() const { return &_class_data_; }


void OpenFHE_RootMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpenFHE_RootMsg*>(&to_msg);
  auto& from = static_cast<const OpenFHE_RootMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OpenFHE.OpenFHE_RootMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_param()) {
    _this->_internal_mutable_param()->::OpenFHE::FHEParameter::MergeFrom(
        from._internal_param());
  }
  if (from._internal_has_evaldata()) {
    _this->_internal_mutable_evaldata()->::OpenFHE::EvalData::MergeFrom(
        from._internal_evaldata());
  }
  if (from._internal_has_apisequence()) {
    _this->_internal_mutable_apisequence()->::OpenFHE::APISequence::MergeFrom(
        from._internal_apisequence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpenFHE_RootMsg::CopyFrom(const OpenFHE_RootMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpenFHE.OpenFHE_RootMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenFHE_RootMsg::IsInitialized() const {
  return true;
}

void OpenFHE_RootMsg::InternalSwap(OpenFHE_RootMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpenFHE_RootMsg, _impl_.apisequence_)
      + sizeof(OpenFHE_RootMsg::_impl_.apisequence_)
      - PROTOBUF_FIELD_OFFSET(OpenFHE_RootMsg, _impl_.param_)>(
          reinterpret_cast<char*>(&_impl_.param_),
          reinterpret_cast<char*>(&other->_impl_.param_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenFHE_RootMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fopenfhe_5fckks_2eproto_getter, &descriptor_table_proto_2fopenfhe_5fckks_2eproto_once,
      file_level_metadata_proto_2fopenfhe_5fckks_2eproto[0]);
}

// ===================================================================

class FHEParameter::_Internal {
 public:
  using HasBits = decltype(std::declval<FHEParameter>()._impl_._has_bits_);
  static void set_has_multiplicativedepth(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_batchsize(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_standarddeviation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_secretkeydist(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_maxrelinskdeg(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_kstech(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_scaltech(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_firstmodsize(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_scalingmodsize(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_multiplicationtechnique(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_premode(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_multipartymode(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_desiredprecision(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_statisticalsecurity(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_numadversarialqueries(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

FHEParameter::FHEParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:OpenFHE.FHEParameter)
}
FHEParameter::FHEParameter(const FHEParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FHEParameter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rotateindexes_){from._impl_.rotateindexes_}
    , /*decltype(_impl_._rotateindexes_cached_byte_size_)*/{0}
    , decltype(_impl_.plaintextmodulus_){}
    , decltype(_impl_.multiplicativedepth_){}
    , decltype(_impl_.batchsize_){}
    , decltype(_impl_.digitsize_){}
    , decltype(_impl_.standarddeviation_){}
    , decltype(_impl_.secretkeydist_){}
    , decltype(_impl_.maxrelinskdeg_){}
    , decltype(_impl_.kstech_){}
    , decltype(_impl_.scaltech_){}
    , decltype(_impl_.firstmodsize_){}
    , decltype(_impl_.scalingmodsize_){}
    , decltype(_impl_.numlargedigits_){}
    , decltype(_impl_.securitylevel_){}
    , decltype(_impl_.ringdim_){}
    , decltype(_impl_.evaladdcount_){}
    , decltype(_impl_.keyswitchcount_){}
    , decltype(_impl_.encryptiontechnique_){}
    , decltype(_impl_.multiplicationtechnique_){}
    , decltype(_impl_.multihopmodsize_){}
    , decltype(_impl_.premode_){}
    , decltype(_impl_.multipartymode_){}
    , decltype(_impl_.noiseestimate_){}
    , decltype(_impl_.desiredprecision_){}
    , decltype(_impl_.statisticalsecurity_){}
    , decltype(_impl_.numadversarialqueries_){}
    , decltype(_impl_.pre_){}
    , decltype(_impl_.multiparty_){}
    , decltype(_impl_.fhe_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.plaintextmodulus_, &from._impl_.plaintextmodulus_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fhe_) -
    reinterpret_cast<char*>(&_impl_.plaintextmodulus_)) + sizeof(_impl_.fhe_));
  // @@protoc_insertion_point(copy_constructor:OpenFHE.FHEParameter)
}

inline void FHEParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rotateindexes_){arena}
    , /*decltype(_impl_._rotateindexes_cached_byte_size_)*/{0}
    , decltype(_impl_.plaintextmodulus_){uint64_t{0u}}
    , decltype(_impl_.multiplicativedepth_){0u}
    , decltype(_impl_.batchsize_){0u}
    , decltype(_impl_.digitsize_){0u}
    , decltype(_impl_.standarddeviation_){0}
    , decltype(_impl_.secretkeydist_){0}
    , decltype(_impl_.maxrelinskdeg_){0u}
    , decltype(_impl_.kstech_){0}
    , decltype(_impl_.scaltech_){0}
    , decltype(_impl_.firstmodsize_){0u}
    , decltype(_impl_.scalingmodsize_){0u}
    , decltype(_impl_.numlargedigits_){0u}
    , decltype(_impl_.securitylevel_){0}
    , decltype(_impl_.ringdim_){0u}
    , decltype(_impl_.evaladdcount_){0u}
    , decltype(_impl_.keyswitchcount_){0u}
    , decltype(_impl_.encryptiontechnique_){0}
    , decltype(_impl_.multiplicationtechnique_){0}
    , decltype(_impl_.multihopmodsize_){0u}
    , decltype(_impl_.premode_){0}
    , decltype(_impl_.multipartymode_){0}
    , decltype(_impl_.noiseestimate_){0}
    , decltype(_impl_.desiredprecision_){0}
    , decltype(_impl_.statisticalsecurity_){0}
    , decltype(_impl_.numadversarialqueries_){0}
    , decltype(_impl_.pre_){false}
    , decltype(_impl_.multiparty_){false}
    , decltype(_impl_.fhe_){false}
  };
}

FHEParameter::~FHEParameter() {
  // @@protoc_insertion_point(destructor:OpenFHE.FHEParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FHEParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rotateindexes_.~RepeatedField();
}

void FHEParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FHEParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:OpenFHE.FHEParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rotateindexes_.Clear();
  _impl_.plaintextmodulus_ = uint64_t{0u};
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.multiplicativedepth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.batchsize_) -
        reinterpret_cast<char*>(&_impl_.multiplicativedepth_)) + sizeof(_impl_.batchsize_));
  }
  _impl_.digitsize_ = 0u;
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.standarddeviation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.firstmodsize_) -
        reinterpret_cast<char*>(&_impl_.standarddeviation_)) + sizeof(_impl_.firstmodsize_));
  }
  _impl_.scalingmodsize_ = 0u;
  ::memset(&_impl_.numlargedigits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.encryptiontechnique_) -
      reinterpret_cast<char*>(&_impl_.numlargedigits_)) + sizeof(_impl_.encryptiontechnique_));
  _impl_.multiplicationtechnique_ = 0;
  _impl_.multihopmodsize_ = 0u;
  if (cached_has_bits & 0x00000c00u) {
    ::memset(&_impl_.premode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.multipartymode_) -
        reinterpret_cast<char*>(&_impl_.premode_)) + sizeof(_impl_.multipartymode_));
  }
  _impl_.noiseestimate_ = 0;
  if (cached_has_bits & 0x00007000u) {
    ::memset(&_impl_.desiredprecision_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.numadversarialqueries_) -
        reinterpret_cast<char*>(&_impl_.desiredprecision_)) + sizeof(_impl_.numadversarialqueries_));
  }
  ::memset(&_impl_.pre_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fhe_) -
      reinterpret_cast<char*>(&_impl_.pre_)) + sizeof(_impl_.fhe_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FHEParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 multiplicativeDepth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_multiplicativedepth(&has_bits);
          _impl_.multiplicativedepth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 plaintextModulus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.plaintextmodulus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 batchSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_batchsize(&has_bits);
          _impl_.batchsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 digitSize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.digitsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float standardDeviation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_standarddeviation(&has_bits);
          _impl_.standarddeviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .OpenFHE.SecretKeyDist secretKeyDist = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_secretkeydist(static_cast<::OpenFHE::SecretKeyDist>(val));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 maxRelinSkDeg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_maxrelinskdeg(&has_bits);
          _impl_.maxrelinskdeg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .OpenFHE.KeySwitchTechnique ksTech = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kstech(static_cast<::OpenFHE::KeySwitchTechnique>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .OpenFHE.ScalingTechnique scalTech = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_scaltech(static_cast<::OpenFHE::ScalingTechnique>(val));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 firstModSize = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_firstmodsize(&has_bits);
          _impl_.firstmodsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 scalingModSize = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_scalingmodsize(&has_bits);
          _impl_.scalingmodsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 numLargeDigits = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.numlargedigits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .OpenFHE.SecurityLevel securityLevel = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_securitylevel(static_cast<::OpenFHE::SecurityLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 ringDim = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.ringdim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 evalAddCount = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.evaladdcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 keySwitchCount = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.keyswitchcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .OpenFHE.EncryptionTechnique encryptionTechnique = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encryptiontechnique(static_cast<::OpenFHE::EncryptionTechnique>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .OpenFHE.MultiplicationTechnique multiplicationTechnique = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_multiplicationtechnique(static_cast<::OpenFHE::MultiplicationTechnique>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 multiHopModSize = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.multihopmodsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .OpenFHE.ProxyReEncryptionMode PREMode = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_premode(static_cast<::OpenFHE::ProxyReEncryptionMode>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .OpenFHE.MultipartyMode multipartyMode = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_multipartymode(static_cast<::OpenFHE::MultipartyMode>(val));
        } else
          goto handle_unusual;
        continue;
      // double noiseEstimate = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _impl_.noiseestimate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double desiredPrecision = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _Internal::set_has_desiredprecision(&has_bits);
          _impl_.desiredprecision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double statisticalSecurity = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          _Internal::set_has_statisticalsecurity(&has_bits);
          _impl_.statisticalsecurity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double numAdversarialQueries = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          _Internal::set_has_numadversarialqueries(&has_bits);
          _impl_.numadversarialqueries_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool PRE = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.pre_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool MULTIPARTY = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.multiparty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool FHE = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.fhe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 rotateIndexes = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_rotateindexes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_rotateindexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FHEParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpenFHE.FHEParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint32 multiplicativeDepth = 1;
  if (_internal_has_multiplicativedepth()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_multiplicativedepth(), target);
  }

  // uint64 plaintextModulus = 2;
  if (this->_internal_plaintextmodulus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_plaintextmodulus(), target);
  }

  // optional uint32 batchSize = 3;
  if (_internal_has_batchsize()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_batchsize(), target);
  }

  // uint32 digitSize = 4;
  if (this->_internal_digitsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_digitsize(), target);
  }

  // optional float standardDeviation = 5;
  if (_internal_has_standarddeviation()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_standarddeviation(), target);
  }

  // optional .OpenFHE.SecretKeyDist secretKeyDist = 6;
  if (_internal_has_secretkeydist()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_secretkeydist(), target);
  }

  // optional uint32 maxRelinSkDeg = 7;
  if (_internal_has_maxrelinskdeg()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_maxrelinskdeg(), target);
  }

  // optional .OpenFHE.KeySwitchTechnique ksTech = 8;
  if (_internal_has_kstech()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_kstech(), target);
  }

  // optional .OpenFHE.ScalingTechnique scalTech = 9;
  if (_internal_has_scaltech()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_scaltech(), target);
  }

  // optional uint32 firstModSize = 10;
  if (_internal_has_firstmodsize()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_firstmodsize(), target);
  }

  // optional uint32 scalingModSize = 11;
  if (_internal_has_scalingmodsize()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_scalingmodsize(), target);
  }

  // uint32 numLargeDigits = 12;
  if (this->_internal_numlargedigits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_numlargedigits(), target);
  }

  // .OpenFHE.SecurityLevel securityLevel = 13;
  if (this->_internal_securitylevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_securitylevel(), target);
  }

  // uint32 ringDim = 14;
  if (this->_internal_ringdim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_ringdim(), target);
  }

  // uint32 evalAddCount = 15;
  if (this->_internal_evaladdcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_evaladdcount(), target);
  }

  // uint32 keySwitchCount = 16;
  if (this->_internal_keyswitchcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_keyswitchcount(), target);
  }

  // .OpenFHE.EncryptionTechnique encryptionTechnique = 17;
  if (this->_internal_encryptiontechnique() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      17, this->_internal_encryptiontechnique(), target);
  }

  // optional .OpenFHE.MultiplicationTechnique multiplicationTechnique = 18;
  if (_internal_has_multiplicationtechnique()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      18, this->_internal_multiplicationtechnique(), target);
  }

  // uint32 multiHopModSize = 19;
  if (this->_internal_multihopmodsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_multihopmodsize(), target);
  }

  // optional .OpenFHE.ProxyReEncryptionMode PREMode = 20;
  if (_internal_has_premode()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      20, this->_internal_premode(), target);
  }

  // optional .OpenFHE.MultipartyMode multipartyMode = 21;
  if (_internal_has_multipartymode()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      21, this->_internal_multipartymode(), target);
  }

  // double noiseEstimate = 24;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_noiseestimate = this->_internal_noiseestimate();
  uint64_t raw_noiseestimate;
  memcpy(&raw_noiseestimate, &tmp_noiseestimate, sizeof(tmp_noiseestimate));
  if (raw_noiseestimate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(24, this->_internal_noiseestimate(), target);
  }

  // optional double desiredPrecision = 25;
  if (_internal_has_desiredprecision()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(25, this->_internal_desiredprecision(), target);
  }

  // optional double statisticalSecurity = 26;
  if (_internal_has_statisticalsecurity()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(26, this->_internal_statisticalsecurity(), target);
  }

  // optional double numAdversarialQueries = 27;
  if (_internal_has_numadversarialqueries()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(27, this->_internal_numadversarialqueries(), target);
  }

  // bool PRE = 30;
  if (this->_internal_pre() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(30, this->_internal_pre(), target);
  }

  // bool MULTIPARTY = 33;
  if (this->_internal_multiparty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(33, this->_internal_multiparty(), target);
  }

  // bool FHE = 34;
  if (this->_internal_fhe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(34, this->_internal_fhe(), target);
  }

  // repeated int32 rotateIndexes = 35;
  {
    int byte_size = _impl_._rotateindexes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          35, _internal_rotateindexes(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpenFHE.FHEParameter)
  return target;
}

size_t FHEParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OpenFHE.FHEParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 rotateIndexes = 35;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.rotateindexes_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._rotateindexes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 plaintextModulus = 2;
  if (this->_internal_plaintextmodulus() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_plaintextmodulus());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 multiplicativeDepth = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_multiplicativedepth());
    }

    // optional uint32 batchSize = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_batchsize());
    }

  }
  // uint32 digitSize = 4;
  if (this->_internal_digitsize() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_digitsize());
  }

  if (cached_has_bits & 0x000000fcu) {
    // optional float standardDeviation = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional .OpenFHE.SecretKeyDist secretKeyDist = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_secretkeydist());
    }

    // optional uint32 maxRelinSkDeg = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxrelinskdeg());
    }

    // optional .OpenFHE.KeySwitchTechnique ksTech = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_kstech());
    }

    // optional .OpenFHE.ScalingTechnique scalTech = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_scaltech());
    }

    // optional uint32 firstModSize = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_firstmodsize());
    }

  }
  // optional uint32 scalingModSize = 11;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_scalingmodsize());
  }

  // uint32 numLargeDigits = 12;
  if (this->_internal_numlargedigits() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_numlargedigits());
  }

  // .OpenFHE.SecurityLevel securityLevel = 13;
  if (this->_internal_securitylevel() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_securitylevel());
  }

  // uint32 ringDim = 14;
  if (this->_internal_ringdim() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ringdim());
  }

  // uint32 evalAddCount = 15;
  if (this->_internal_evaladdcount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_evaladdcount());
  }

  // uint32 keySwitchCount = 16;
  if (this->_internal_keyswitchcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_keyswitchcount());
  }

  // .OpenFHE.EncryptionTechnique encryptionTechnique = 17;
  if (this->_internal_encryptiontechnique() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_encryptiontechnique());
  }

  // optional .OpenFHE.MultiplicationTechnique multiplicationTechnique = 18;
  if (cached_has_bits & 0x00000200u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_multiplicationtechnique());
  }

  // uint32 multiHopModSize = 19;
  if (this->_internal_multihopmodsize() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_multihopmodsize());
  }

  if (cached_has_bits & 0x00000c00u) {
    // optional .OpenFHE.ProxyReEncryptionMode PREMode = 20;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_premode());
    }

    // optional .OpenFHE.MultipartyMode multipartyMode = 21;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_multipartymode());
    }

  }
  // double noiseEstimate = 24;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_noiseestimate = this->_internal_noiseestimate();
  uint64_t raw_noiseestimate;
  memcpy(&raw_noiseestimate, &tmp_noiseestimate, sizeof(tmp_noiseestimate));
  if (raw_noiseestimate != 0) {
    total_size += 2 + 8;
  }

  if (cached_has_bits & 0x00007000u) {
    // optional double desiredPrecision = 25;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional double statisticalSecurity = 26;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

    // optional double numAdversarialQueries = 27;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 8;
    }

  }
  // bool PRE = 30;
  if (this->_internal_pre() != 0) {
    total_size += 2 + 1;
  }

  // bool MULTIPARTY = 33;
  if (this->_internal_multiparty() != 0) {
    total_size += 2 + 1;
  }

  // bool FHE = 34;
  if (this->_internal_fhe() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FHEParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FHEParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FHEParameter::GetClassData() const { return &_class_data_; }


void FHEParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FHEParameter*>(&to_msg);
  auto& from = static_cast<const FHEParameter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OpenFHE.FHEParameter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rotateindexes_.MergeFrom(from._impl_.rotateindexes_);
  if (from._internal_plaintextmodulus() != 0) {
    _this->_internal_set_plaintextmodulus(from._internal_plaintextmodulus());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.multiplicativedepth_ = from._impl_.multiplicativedepth_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.batchsize_ = from._impl_.batchsize_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_digitsize() != 0) {
    _this->_internal_set_digitsize(from._internal_digitsize());
  }
  if (cached_has_bits & 0x000000fcu) {
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.standarddeviation_ = from._impl_.standarddeviation_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.secretkeydist_ = from._impl_.secretkeydist_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.maxrelinskdeg_ = from._impl_.maxrelinskdeg_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.kstech_ = from._impl_.kstech_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.scaltech_ = from._impl_.scaltech_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.firstmodsize_ = from._impl_.firstmodsize_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_scalingmodsize(from._internal_scalingmodsize());
  }
  if (from._internal_numlargedigits() != 0) {
    _this->_internal_set_numlargedigits(from._internal_numlargedigits());
  }
  if (from._internal_securitylevel() != 0) {
    _this->_internal_set_securitylevel(from._internal_securitylevel());
  }
  if (from._internal_ringdim() != 0) {
    _this->_internal_set_ringdim(from._internal_ringdim());
  }
  if (from._internal_evaladdcount() != 0) {
    _this->_internal_set_evaladdcount(from._internal_evaladdcount());
  }
  if (from._internal_keyswitchcount() != 0) {
    _this->_internal_set_keyswitchcount(from._internal_keyswitchcount());
  }
  if (from._internal_encryptiontechnique() != 0) {
    _this->_internal_set_encryptiontechnique(from._internal_encryptiontechnique());
  }
  if (cached_has_bits & 0x00000200u) {
    _this->_internal_set_multiplicationtechnique(from._internal_multiplicationtechnique());
  }
  if (from._internal_multihopmodsize() != 0) {
    _this->_internal_set_multihopmodsize(from._internal_multihopmodsize());
  }
  if (cached_has_bits & 0x00000c00u) {
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.premode_ = from._impl_.premode_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.multipartymode_ = from._impl_.multipartymode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_noiseestimate = from._internal_noiseestimate();
  uint64_t raw_noiseestimate;
  memcpy(&raw_noiseestimate, &tmp_noiseestimate, sizeof(tmp_noiseestimate));
  if (raw_noiseestimate != 0) {
    _this->_internal_set_noiseestimate(from._internal_noiseestimate());
  }
  if (cached_has_bits & 0x00007000u) {
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.desiredprecision_ = from._impl_.desiredprecision_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.statisticalsecurity_ = from._impl_.statisticalsecurity_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.numadversarialqueries_ = from._impl_.numadversarialqueries_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_pre() != 0) {
    _this->_internal_set_pre(from._internal_pre());
  }
  if (from._internal_multiparty() != 0) {
    _this->_internal_set_multiparty(from._internal_multiparty());
  }
  if (from._internal_fhe() != 0) {
    _this->_internal_set_fhe(from._internal_fhe());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FHEParameter::CopyFrom(const FHEParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpenFHE.FHEParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FHEParameter::IsInitialized() const {
  return true;
}

void FHEParameter::InternalSwap(FHEParameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.rotateindexes_.InternalSwap(&other->_impl_.rotateindexes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FHEParameter, _impl_.fhe_)
      + sizeof(FHEParameter::_impl_.fhe_)
      - PROTOBUF_FIELD_OFFSET(FHEParameter, _impl_.plaintextmodulus_)>(
          reinterpret_cast<char*>(&_impl_.plaintextmodulus_),
          reinterpret_cast<char*>(&other->_impl_.plaintextmodulus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FHEParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fopenfhe_5fckks_2eproto_getter, &descriptor_table_proto_2fopenfhe_5fckks_2eproto_once,
      file_level_metadata_proto_2fopenfhe_5fckks_2eproto[1]);
}

// ===================================================================

class EvalData_OneDataList::_Internal {
 public:
};

EvalData_OneDataList::EvalData_OneDataList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:OpenFHE.EvalData.OneDataList)
}
EvalData_OneDataList::EvalData_OneDataList(const EvalData_OneDataList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EvalData_OneDataList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datalist_){from._impl_.datalist_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OpenFHE.EvalData.OneDataList)
}

inline void EvalData_OneDataList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.datalist_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EvalData_OneDataList::~EvalData_OneDataList() {
  // @@protoc_insertion_point(destructor:OpenFHE.EvalData.OneDataList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EvalData_OneDataList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.datalist_.~RepeatedField();
}

void EvalData_OneDataList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EvalData_OneDataList::Clear() {
// @@protoc_insertion_point(message_clear_start:OpenFHE.EvalData.OneDataList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.datalist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EvalData_OneDataList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double dataList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_datalist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_datalist(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EvalData_OneDataList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpenFHE.EvalData.OneDataList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double dataList = 1;
  if (this->_internal_datalist_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_datalist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpenFHE.EvalData.OneDataList)
  return target;
}

size_t EvalData_OneDataList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OpenFHE.EvalData.OneDataList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double dataList = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_datalist_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EvalData_OneDataList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EvalData_OneDataList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EvalData_OneDataList::GetClassData() const { return &_class_data_; }


void EvalData_OneDataList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EvalData_OneDataList*>(&to_msg);
  auto& from = static_cast<const EvalData_OneDataList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OpenFHE.EvalData.OneDataList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.datalist_.MergeFrom(from._impl_.datalist_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EvalData_OneDataList::CopyFrom(const EvalData_OneDataList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpenFHE.EvalData.OneDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvalData_OneDataList::IsInitialized() const {
  return true;
}

void EvalData_OneDataList::InternalSwap(EvalData_OneDataList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.datalist_.InternalSwap(&other->_impl_.datalist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EvalData_OneDataList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fopenfhe_5fckks_2eproto_getter, &descriptor_table_proto_2fopenfhe_5fckks_2eproto_once,
      file_level_metadata_proto_2fopenfhe_5fckks_2eproto[2]);
}

// ===================================================================

class EvalData::_Internal {
 public:
};

EvalData::EvalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:OpenFHE.EvalData)
}
EvalData::EvalData(const EvalData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EvalData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.alldatalists_){from._impl_.alldatalists_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OpenFHE.EvalData)
}

inline void EvalData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.alldatalists_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EvalData::~EvalData() {
  // @@protoc_insertion_point(destructor:OpenFHE.EvalData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EvalData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.alldatalists_.~RepeatedPtrField();
}

void EvalData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EvalData::Clear() {
// @@protoc_insertion_point(message_clear_start:OpenFHE.EvalData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.alldatalists_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EvalData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .OpenFHE.EvalData.OneDataList allDataLists = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_alldatalists(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EvalData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpenFHE.EvalData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OpenFHE.EvalData.OneDataList allDataLists = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_alldatalists_size()); i < n; i++) {
    const auto& repfield = this->_internal_alldatalists(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpenFHE.EvalData)
  return target;
}

size_t EvalData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OpenFHE.EvalData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OpenFHE.EvalData.OneDataList allDataLists = 2;
  total_size += 1UL * this->_internal_alldatalists_size();
  for (const auto& msg : this->_impl_.alldatalists_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EvalData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EvalData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EvalData::GetClassData() const { return &_class_data_; }


void EvalData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EvalData*>(&to_msg);
  auto& from = static_cast<const EvalData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OpenFHE.EvalData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.alldatalists_.MergeFrom(from._impl_.alldatalists_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EvalData::CopyFrom(const EvalData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpenFHE.EvalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvalData::IsInitialized() const {
  return true;
}

void EvalData::InternalSwap(EvalData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.alldatalists_.InternalSwap(&other->_impl_.alldatalists_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EvalData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fopenfhe_5fckks_2eproto_getter, &descriptor_table_proto_2fopenfhe_5fckks_2eproto_once,
      file_level_metadata_proto_2fopenfhe_5fckks_2eproto[3]);
}

// ===================================================================

class APISequence_OneAPI_AddTwoList::_Internal {
 public:
};

APISequence_OneAPI_AddTwoList::APISequence_OneAPI_AddTwoList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:OpenFHE.APISequence.OneAPI.AddTwoList)
}
APISequence_OneAPI_AddTwoList::APISequence_OneAPI_AddTwoList(const APISequence_OneAPI_AddTwoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  APISequence_OneAPI_AddTwoList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src1_){}
    , decltype(_impl_.src2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.src1_, &from._impl_.src1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.src2_) -
    reinterpret_cast<char*>(&_impl_.src1_)) + sizeof(_impl_.src2_));
  // @@protoc_insertion_point(copy_constructor:OpenFHE.APISequence.OneAPI.AddTwoList)
}

inline void APISequence_OneAPI_AddTwoList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.src1_){0u}
    , decltype(_impl_.src2_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

APISequence_OneAPI_AddTwoList::~APISequence_OneAPI_AddTwoList() {
  // @@protoc_insertion_point(destructor:OpenFHE.APISequence.OneAPI.AddTwoList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void APISequence_OneAPI_AddTwoList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void APISequence_OneAPI_AddTwoList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void APISequence_OneAPI_AddTwoList::Clear() {
// @@protoc_insertion_point(message_clear_start:OpenFHE.APISequence.OneAPI.AddTwoList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.src1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.src2_) -
      reinterpret_cast<char*>(&_impl_.src1_)) + sizeof(_impl_.src2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APISequence_OneAPI_AddTwoList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 src1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.src1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 src2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.src2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* APISequence_OneAPI_AddTwoList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpenFHE.APISequence.OneAPI.AddTwoList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 src1 = 1;
  if (this->_internal_src1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_src1(), target);
  }

  // uint32 src2 = 2;
  if (this->_internal_src2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_src2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpenFHE.APISequence.OneAPI.AddTwoList)
  return target;
}

size_t APISequence_OneAPI_AddTwoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OpenFHE.APISequence.OneAPI.AddTwoList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 src1 = 1;
  if (this->_internal_src1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_src1());
  }

  // uint32 src2 = 2;
  if (this->_internal_src2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_src2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData APISequence_OneAPI_AddTwoList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    APISequence_OneAPI_AddTwoList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*APISequence_OneAPI_AddTwoList::GetClassData() const { return &_class_data_; }


void APISequence_OneAPI_AddTwoList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<APISequence_OneAPI_AddTwoList*>(&to_msg);
  auto& from = static_cast<const APISequence_OneAPI_AddTwoList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OpenFHE.APISequence.OneAPI.AddTwoList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_src1() != 0) {
    _this->_internal_set_src1(from._internal_src1());
  }
  if (from._internal_src2() != 0) {
    _this->_internal_set_src2(from._internal_src2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void APISequence_OneAPI_AddTwoList::CopyFrom(const APISequence_OneAPI_AddTwoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpenFHE.APISequence.OneAPI.AddTwoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APISequence_OneAPI_AddTwoList::IsInitialized() const {
  return true;
}

void APISequence_OneAPI_AddTwoList::InternalSwap(APISequence_OneAPI_AddTwoList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(APISequence_OneAPI_AddTwoList, _impl_.src2_)
      + sizeof(APISequence_OneAPI_AddTwoList::_impl_.src2_)
      - PROTOBUF_FIELD_OFFSET(APISequence_OneAPI_AddTwoList, _impl_.src1_)>(
          reinterpret_cast<char*>(&_impl_.src1_),
          reinterpret_cast<char*>(&other->_impl_.src1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata APISequence_OneAPI_AddTwoList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fopenfhe_5fckks_2eproto_getter, &descriptor_table_proto_2fopenfhe_5fckks_2eproto_once,
      file_level_metadata_proto_2fopenfhe_5fckks_2eproto[4]);
}

// ===================================================================

class APISequence_OneAPI_AddConstant::_Internal {
 public:
};

APISequence_OneAPI_AddConstant::APISequence_OneAPI_AddConstant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:OpenFHE.APISequence.OneAPI.AddConstant)
}
APISequence_OneAPI_AddConstant::APISequence_OneAPI_AddConstant(const APISequence_OneAPI_AddConstant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  APISequence_OneAPI_AddConstant* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.num_){}
    , decltype(_impl_.src_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.num_, &from._impl_.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.src_) -
    reinterpret_cast<char*>(&_impl_.num_)) + sizeof(_impl_.src_));
  // @@protoc_insertion_point(copy_constructor:OpenFHE.APISequence.OneAPI.AddConstant)
}

inline void APISequence_OneAPI_AddConstant::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.num_){0}
    , decltype(_impl_.src_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

APISequence_OneAPI_AddConstant::~APISequence_OneAPI_AddConstant() {
  // @@protoc_insertion_point(destructor:OpenFHE.APISequence.OneAPI.AddConstant)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void APISequence_OneAPI_AddConstant::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void APISequence_OneAPI_AddConstant::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void APISequence_OneAPI_AddConstant::Clear() {
// @@protoc_insertion_point(message_clear_start:OpenFHE.APISequence.OneAPI.AddConstant)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.src_) -
      reinterpret_cast<char*>(&_impl_.num_)) + sizeof(_impl_.src_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APISequence_OneAPI_AddConstant::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.src_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* APISequence_OneAPI_AddConstant::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpenFHE.APISequence.OneAPI.AddConstant)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 src = 1;
  if (this->_internal_src() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_src(), target);
  }

  // double num = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_num = this->_internal_num();
  uint64_t raw_num;
  memcpy(&raw_num, &tmp_num, sizeof(tmp_num));
  if (raw_num != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpenFHE.APISequence.OneAPI.AddConstant)
  return target;
}

size_t APISequence_OneAPI_AddConstant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OpenFHE.APISequence.OneAPI.AddConstant)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double num = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_num = this->_internal_num();
  uint64_t raw_num;
  memcpy(&raw_num, &tmp_num, sizeof(tmp_num));
  if (raw_num != 0) {
    total_size += 1 + 8;
  }

  // uint32 src = 1;
  if (this->_internal_src() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_src());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData APISequence_OneAPI_AddConstant::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    APISequence_OneAPI_AddConstant::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*APISequence_OneAPI_AddConstant::GetClassData() const { return &_class_data_; }


void APISequence_OneAPI_AddConstant::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<APISequence_OneAPI_AddConstant*>(&to_msg);
  auto& from = static_cast<const APISequence_OneAPI_AddConstant&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OpenFHE.APISequence.OneAPI.AddConstant)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_num = from._internal_num();
  uint64_t raw_num;
  memcpy(&raw_num, &tmp_num, sizeof(tmp_num));
  if (raw_num != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  if (from._internal_src() != 0) {
    _this->_internal_set_src(from._internal_src());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void APISequence_OneAPI_AddConstant::CopyFrom(const APISequence_OneAPI_AddConstant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpenFHE.APISequence.OneAPI.AddConstant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APISequence_OneAPI_AddConstant::IsInitialized() const {
  return true;
}

void APISequence_OneAPI_AddConstant::InternalSwap(APISequence_OneAPI_AddConstant* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(APISequence_OneAPI_AddConstant, _impl_.src_)
      + sizeof(APISequence_OneAPI_AddConstant::_impl_.src_)
      - PROTOBUF_FIELD_OFFSET(APISequence_OneAPI_AddConstant, _impl_.num_)>(
          reinterpret_cast<char*>(&_impl_.num_),
          reinterpret_cast<char*>(&other->_impl_.num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata APISequence_OneAPI_AddConstant::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fopenfhe_5fckks_2eproto_getter, &descriptor_table_proto_2fopenfhe_5fckks_2eproto_once,
      file_level_metadata_proto_2fopenfhe_5fckks_2eproto[5]);
}

// ===================================================================

class APISequence_OneAPI_AddManyList::_Internal {
 public:
};

APISequence_OneAPI_AddManyList::APISequence_OneAPI_AddManyList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:OpenFHE.APISequence.OneAPI.AddManyList)
}
APISequence_OneAPI_AddManyList::APISequence_OneAPI_AddManyList(const APISequence_OneAPI_AddManyList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  APISequence_OneAPI_AddManyList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.srcs_){from._impl_.srcs_}
    , /*decltype(_impl_._srcs_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OpenFHE.APISequence.OneAPI.AddManyList)
}

inline void APISequence_OneAPI_AddManyList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.srcs_){arena}
    , /*decltype(_impl_._srcs_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

APISequence_OneAPI_AddManyList::~APISequence_OneAPI_AddManyList() {
  // @@protoc_insertion_point(destructor:OpenFHE.APISequence.OneAPI.AddManyList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void APISequence_OneAPI_AddManyList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.srcs_.~RepeatedField();
}

void APISequence_OneAPI_AddManyList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void APISequence_OneAPI_AddManyList::Clear() {
// @@protoc_insertion_point(message_clear_start:OpenFHE.APISequence.OneAPI.AddManyList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.srcs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APISequence_OneAPI_AddManyList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 srcs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_srcs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_srcs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* APISequence_OneAPI_AddManyList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpenFHE.APISequence.OneAPI.AddManyList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 srcs = 1;
  {
    int byte_size = _impl_._srcs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_srcs(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpenFHE.APISequence.OneAPI.AddManyList)
  return target;
}

size_t APISequence_OneAPI_AddManyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OpenFHE.APISequence.OneAPI.AddManyList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 srcs = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.srcs_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._srcs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData APISequence_OneAPI_AddManyList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    APISequence_OneAPI_AddManyList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*APISequence_OneAPI_AddManyList::GetClassData() const { return &_class_data_; }


void APISequence_OneAPI_AddManyList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<APISequence_OneAPI_AddManyList*>(&to_msg);
  auto& from = static_cast<const APISequence_OneAPI_AddManyList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OpenFHE.APISequence.OneAPI.AddManyList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.srcs_.MergeFrom(from._impl_.srcs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void APISequence_OneAPI_AddManyList::CopyFrom(const APISequence_OneAPI_AddManyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpenFHE.APISequence.OneAPI.AddManyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APISequence_OneAPI_AddManyList::IsInitialized() const {
  return true;
}

void APISequence_OneAPI_AddManyList::InternalSwap(APISequence_OneAPI_AddManyList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.srcs_.InternalSwap(&other->_impl_.srcs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata APISequence_OneAPI_AddManyList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fopenfhe_5fckks_2eproto_getter, &descriptor_table_proto_2fopenfhe_5fckks_2eproto_once,
      file_level_metadata_proto_2fopenfhe_5fckks_2eproto[6]);
}

// ===================================================================

class APISequence_OneAPI_SubTwoList::_Internal {
 public:
};

APISequence_OneAPI_SubTwoList::APISequence_OneAPI_SubTwoList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:OpenFHE.APISequence.OneAPI.SubTwoList)
}
APISequence_OneAPI_SubTwoList::APISequence_OneAPI_SubTwoList(const APISequence_OneAPI_SubTwoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  APISequence_OneAPI_SubTwoList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src1_){}
    , decltype(_impl_.src2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.src1_, &from._impl_.src1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.src2_) -
    reinterpret_cast<char*>(&_impl_.src1_)) + sizeof(_impl_.src2_));
  // @@protoc_insertion_point(copy_constructor:OpenFHE.APISequence.OneAPI.SubTwoList)
}

inline void APISequence_OneAPI_SubTwoList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.src1_){0u}
    , decltype(_impl_.src2_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

APISequence_OneAPI_SubTwoList::~APISequence_OneAPI_SubTwoList() {
  // @@protoc_insertion_point(destructor:OpenFHE.APISequence.OneAPI.SubTwoList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void APISequence_OneAPI_SubTwoList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void APISequence_OneAPI_SubTwoList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void APISequence_OneAPI_SubTwoList::Clear() {
// @@protoc_insertion_point(message_clear_start:OpenFHE.APISequence.OneAPI.SubTwoList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.src1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.src2_) -
      reinterpret_cast<char*>(&_impl_.src1_)) + sizeof(_impl_.src2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APISequence_OneAPI_SubTwoList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 src1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.src1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 src2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.src2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* APISequence_OneAPI_SubTwoList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpenFHE.APISequence.OneAPI.SubTwoList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 src1 = 1;
  if (this->_internal_src1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_src1(), target);
  }

  // uint32 src2 = 2;
  if (this->_internal_src2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_src2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpenFHE.APISequence.OneAPI.SubTwoList)
  return target;
}

size_t APISequence_OneAPI_SubTwoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OpenFHE.APISequence.OneAPI.SubTwoList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 src1 = 1;
  if (this->_internal_src1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_src1());
  }

  // uint32 src2 = 2;
  if (this->_internal_src2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_src2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData APISequence_OneAPI_SubTwoList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    APISequence_OneAPI_SubTwoList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*APISequence_OneAPI_SubTwoList::GetClassData() const { return &_class_data_; }


void APISequence_OneAPI_SubTwoList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<APISequence_OneAPI_SubTwoList*>(&to_msg);
  auto& from = static_cast<const APISequence_OneAPI_SubTwoList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OpenFHE.APISequence.OneAPI.SubTwoList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_src1() != 0) {
    _this->_internal_set_src1(from._internal_src1());
  }
  if (from._internal_src2() != 0) {
    _this->_internal_set_src2(from._internal_src2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void APISequence_OneAPI_SubTwoList::CopyFrom(const APISequence_OneAPI_SubTwoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpenFHE.APISequence.OneAPI.SubTwoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APISequence_OneAPI_SubTwoList::IsInitialized() const {
  return true;
}

void APISequence_OneAPI_SubTwoList::InternalSwap(APISequence_OneAPI_SubTwoList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(APISequence_OneAPI_SubTwoList, _impl_.src2_)
      + sizeof(APISequence_OneAPI_SubTwoList::_impl_.src2_)
      - PROTOBUF_FIELD_OFFSET(APISequence_OneAPI_SubTwoList, _impl_.src1_)>(
          reinterpret_cast<char*>(&_impl_.src1_),
          reinterpret_cast<char*>(&other->_impl_.src1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata APISequence_OneAPI_SubTwoList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fopenfhe_5fckks_2eproto_getter, &descriptor_table_proto_2fopenfhe_5fckks_2eproto_once,
      file_level_metadata_proto_2fopenfhe_5fckks_2eproto[7]);
}

// ===================================================================

class APISequence_OneAPI_SubConstant::_Internal {
 public:
};

APISequence_OneAPI_SubConstant::APISequence_OneAPI_SubConstant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:OpenFHE.APISequence.OneAPI.SubConstant)
}
APISequence_OneAPI_SubConstant::APISequence_OneAPI_SubConstant(const APISequence_OneAPI_SubConstant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  APISequence_OneAPI_SubConstant* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.num_){}
    , decltype(_impl_.src_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.num_, &from._impl_.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.src_) -
    reinterpret_cast<char*>(&_impl_.num_)) + sizeof(_impl_.src_));
  // @@protoc_insertion_point(copy_constructor:OpenFHE.APISequence.OneAPI.SubConstant)
}

inline void APISequence_OneAPI_SubConstant::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.num_){0}
    , decltype(_impl_.src_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

APISequence_OneAPI_SubConstant::~APISequence_OneAPI_SubConstant() {
  // @@protoc_insertion_point(destructor:OpenFHE.APISequence.OneAPI.SubConstant)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void APISequence_OneAPI_SubConstant::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void APISequence_OneAPI_SubConstant::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void APISequence_OneAPI_SubConstant::Clear() {
// @@protoc_insertion_point(message_clear_start:OpenFHE.APISequence.OneAPI.SubConstant)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.src_) -
      reinterpret_cast<char*>(&_impl_.num_)) + sizeof(_impl_.src_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APISequence_OneAPI_SubConstant::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.src_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* APISequence_OneAPI_SubConstant::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpenFHE.APISequence.OneAPI.SubConstant)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 src = 1;
  if (this->_internal_src() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_src(), target);
  }

  // double num = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_num = this->_internal_num();
  uint64_t raw_num;
  memcpy(&raw_num, &tmp_num, sizeof(tmp_num));
  if (raw_num != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpenFHE.APISequence.OneAPI.SubConstant)
  return target;
}

size_t APISequence_OneAPI_SubConstant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OpenFHE.APISequence.OneAPI.SubConstant)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double num = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_num = this->_internal_num();
  uint64_t raw_num;
  memcpy(&raw_num, &tmp_num, sizeof(tmp_num));
  if (raw_num != 0) {
    total_size += 1 + 8;
  }

  // uint32 src = 1;
  if (this->_internal_src() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_src());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData APISequence_OneAPI_SubConstant::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    APISequence_OneAPI_SubConstant::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*APISequence_OneAPI_SubConstant::GetClassData() const { return &_class_data_; }


void APISequence_OneAPI_SubConstant::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<APISequence_OneAPI_SubConstant*>(&to_msg);
  auto& from = static_cast<const APISequence_OneAPI_SubConstant&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OpenFHE.APISequence.OneAPI.SubConstant)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_num = from._internal_num();
  uint64_t raw_num;
  memcpy(&raw_num, &tmp_num, sizeof(tmp_num));
  if (raw_num != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  if (from._internal_src() != 0) {
    _this->_internal_set_src(from._internal_src());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void APISequence_OneAPI_SubConstant::CopyFrom(const APISequence_OneAPI_SubConstant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpenFHE.APISequence.OneAPI.SubConstant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APISequence_OneAPI_SubConstant::IsInitialized() const {
  return true;
}

void APISequence_OneAPI_SubConstant::InternalSwap(APISequence_OneAPI_SubConstant* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(APISequence_OneAPI_SubConstant, _impl_.src_)
      + sizeof(APISequence_OneAPI_SubConstant::_impl_.src_)
      - PROTOBUF_FIELD_OFFSET(APISequence_OneAPI_SubConstant, _impl_.num_)>(
          reinterpret_cast<char*>(&_impl_.num_),
          reinterpret_cast<char*>(&other->_impl_.num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata APISequence_OneAPI_SubConstant::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fopenfhe_5fckks_2eproto_getter, &descriptor_table_proto_2fopenfhe_5fckks_2eproto_once,
      file_level_metadata_proto_2fopenfhe_5fckks_2eproto[8]);
}

// ===================================================================

class APISequence_OneAPI_MulTwoList::_Internal {
 public:
};

APISequence_OneAPI_MulTwoList::APISequence_OneAPI_MulTwoList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:OpenFHE.APISequence.OneAPI.MulTwoList)
}
APISequence_OneAPI_MulTwoList::APISequence_OneAPI_MulTwoList(const APISequence_OneAPI_MulTwoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  APISequence_OneAPI_MulTwoList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src1_){}
    , decltype(_impl_.src2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.src1_, &from._impl_.src1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.src2_) -
    reinterpret_cast<char*>(&_impl_.src1_)) + sizeof(_impl_.src2_));
  // @@protoc_insertion_point(copy_constructor:OpenFHE.APISequence.OneAPI.MulTwoList)
}

inline void APISequence_OneAPI_MulTwoList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.src1_){0u}
    , decltype(_impl_.src2_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

APISequence_OneAPI_MulTwoList::~APISequence_OneAPI_MulTwoList() {
  // @@protoc_insertion_point(destructor:OpenFHE.APISequence.OneAPI.MulTwoList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void APISequence_OneAPI_MulTwoList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void APISequence_OneAPI_MulTwoList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void APISequence_OneAPI_MulTwoList::Clear() {
// @@protoc_insertion_point(message_clear_start:OpenFHE.APISequence.OneAPI.MulTwoList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.src1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.src2_) -
      reinterpret_cast<char*>(&_impl_.src1_)) + sizeof(_impl_.src2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APISequence_OneAPI_MulTwoList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 src1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.src1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 src2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.src2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* APISequence_OneAPI_MulTwoList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpenFHE.APISequence.OneAPI.MulTwoList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 src1 = 1;
  if (this->_internal_src1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_src1(), target);
  }

  // uint32 src2 = 2;
  if (this->_internal_src2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_src2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpenFHE.APISequence.OneAPI.MulTwoList)
  return target;
}

size_t APISequence_OneAPI_MulTwoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OpenFHE.APISequence.OneAPI.MulTwoList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 src1 = 1;
  if (this->_internal_src1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_src1());
  }

  // uint32 src2 = 2;
  if (this->_internal_src2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_src2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData APISequence_OneAPI_MulTwoList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    APISequence_OneAPI_MulTwoList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*APISequence_OneAPI_MulTwoList::GetClassData() const { return &_class_data_; }


void APISequence_OneAPI_MulTwoList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<APISequence_OneAPI_MulTwoList*>(&to_msg);
  auto& from = static_cast<const APISequence_OneAPI_MulTwoList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OpenFHE.APISequence.OneAPI.MulTwoList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_src1() != 0) {
    _this->_internal_set_src1(from._internal_src1());
  }
  if (from._internal_src2() != 0) {
    _this->_internal_set_src2(from._internal_src2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void APISequence_OneAPI_MulTwoList::CopyFrom(const APISequence_OneAPI_MulTwoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpenFHE.APISequence.OneAPI.MulTwoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APISequence_OneAPI_MulTwoList::IsInitialized() const {
  return true;
}

void APISequence_OneAPI_MulTwoList::InternalSwap(APISequence_OneAPI_MulTwoList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(APISequence_OneAPI_MulTwoList, _impl_.src2_)
      + sizeof(APISequence_OneAPI_MulTwoList::_impl_.src2_)
      - PROTOBUF_FIELD_OFFSET(APISequence_OneAPI_MulTwoList, _impl_.src1_)>(
          reinterpret_cast<char*>(&_impl_.src1_),
          reinterpret_cast<char*>(&other->_impl_.src1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata APISequence_OneAPI_MulTwoList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fopenfhe_5fckks_2eproto_getter, &descriptor_table_proto_2fopenfhe_5fckks_2eproto_once,
      file_level_metadata_proto_2fopenfhe_5fckks_2eproto[9]);
}

// ===================================================================

class APISequence_OneAPI_MulConstant::_Internal {
 public:
};

APISequence_OneAPI_MulConstant::APISequence_OneAPI_MulConstant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:OpenFHE.APISequence.OneAPI.MulConstant)
}
APISequence_OneAPI_MulConstant::APISequence_OneAPI_MulConstant(const APISequence_OneAPI_MulConstant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  APISequence_OneAPI_MulConstant* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.num_){}
    , decltype(_impl_.src_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.num_, &from._impl_.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.src_) -
    reinterpret_cast<char*>(&_impl_.num_)) + sizeof(_impl_.src_));
  // @@protoc_insertion_point(copy_constructor:OpenFHE.APISequence.OneAPI.MulConstant)
}

inline void APISequence_OneAPI_MulConstant::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.num_){0}
    , decltype(_impl_.src_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

APISequence_OneAPI_MulConstant::~APISequence_OneAPI_MulConstant() {
  // @@protoc_insertion_point(destructor:OpenFHE.APISequence.OneAPI.MulConstant)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void APISequence_OneAPI_MulConstant::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void APISequence_OneAPI_MulConstant::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void APISequence_OneAPI_MulConstant::Clear() {
// @@protoc_insertion_point(message_clear_start:OpenFHE.APISequence.OneAPI.MulConstant)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.src_) -
      reinterpret_cast<char*>(&_impl_.num_)) + sizeof(_impl_.src_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APISequence_OneAPI_MulConstant::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.src_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* APISequence_OneAPI_MulConstant::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpenFHE.APISequence.OneAPI.MulConstant)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 src = 1;
  if (this->_internal_src() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_src(), target);
  }

  // double num = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_num = this->_internal_num();
  uint64_t raw_num;
  memcpy(&raw_num, &tmp_num, sizeof(tmp_num));
  if (raw_num != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpenFHE.APISequence.OneAPI.MulConstant)
  return target;
}

size_t APISequence_OneAPI_MulConstant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OpenFHE.APISequence.OneAPI.MulConstant)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double num = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_num = this->_internal_num();
  uint64_t raw_num;
  memcpy(&raw_num, &tmp_num, sizeof(tmp_num));
  if (raw_num != 0) {
    total_size += 1 + 8;
  }

  // uint32 src = 1;
  if (this->_internal_src() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_src());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData APISequence_OneAPI_MulConstant::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    APISequence_OneAPI_MulConstant::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*APISequence_OneAPI_MulConstant::GetClassData() const { return &_class_data_; }


void APISequence_OneAPI_MulConstant::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<APISequence_OneAPI_MulConstant*>(&to_msg);
  auto& from = static_cast<const APISequence_OneAPI_MulConstant&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OpenFHE.APISequence.OneAPI.MulConstant)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_num = from._internal_num();
  uint64_t raw_num;
  memcpy(&raw_num, &tmp_num, sizeof(tmp_num));
  if (raw_num != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  if (from._internal_src() != 0) {
    _this->_internal_set_src(from._internal_src());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void APISequence_OneAPI_MulConstant::CopyFrom(const APISequence_OneAPI_MulConstant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpenFHE.APISequence.OneAPI.MulConstant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APISequence_OneAPI_MulConstant::IsInitialized() const {
  return true;
}

void APISequence_OneAPI_MulConstant::InternalSwap(APISequence_OneAPI_MulConstant* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(APISequence_OneAPI_MulConstant, _impl_.src_)
      + sizeof(APISequence_OneAPI_MulConstant::_impl_.src_)
      - PROTOBUF_FIELD_OFFSET(APISequence_OneAPI_MulConstant, _impl_.num_)>(
          reinterpret_cast<char*>(&_impl_.num_),
          reinterpret_cast<char*>(&other->_impl_.num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata APISequence_OneAPI_MulConstant::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fopenfhe_5fckks_2eproto_getter, &descriptor_table_proto_2fopenfhe_5fckks_2eproto_once,
      file_level_metadata_proto_2fopenfhe_5fckks_2eproto[10]);
}

// ===================================================================

class APISequence_OneAPI_MulManyList::_Internal {
 public:
};

APISequence_OneAPI_MulManyList::APISequence_OneAPI_MulManyList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:OpenFHE.APISequence.OneAPI.MulManyList)
}
APISequence_OneAPI_MulManyList::APISequence_OneAPI_MulManyList(const APISequence_OneAPI_MulManyList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  APISequence_OneAPI_MulManyList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.srcs_){from._impl_.srcs_}
    , /*decltype(_impl_._srcs_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OpenFHE.APISequence.OneAPI.MulManyList)
}

inline void APISequence_OneAPI_MulManyList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.srcs_){arena}
    , /*decltype(_impl_._srcs_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

APISequence_OneAPI_MulManyList::~APISequence_OneAPI_MulManyList() {
  // @@protoc_insertion_point(destructor:OpenFHE.APISequence.OneAPI.MulManyList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void APISequence_OneAPI_MulManyList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.srcs_.~RepeatedField();
}

void APISequence_OneAPI_MulManyList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void APISequence_OneAPI_MulManyList::Clear() {
// @@protoc_insertion_point(message_clear_start:OpenFHE.APISequence.OneAPI.MulManyList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.srcs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APISequence_OneAPI_MulManyList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 srcs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_srcs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_srcs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* APISequence_OneAPI_MulManyList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpenFHE.APISequence.OneAPI.MulManyList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 srcs = 1;
  {
    int byte_size = _impl_._srcs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_srcs(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpenFHE.APISequence.OneAPI.MulManyList)
  return target;
}

size_t APISequence_OneAPI_MulManyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OpenFHE.APISequence.OneAPI.MulManyList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 srcs = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.srcs_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._srcs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData APISequence_OneAPI_MulManyList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    APISequence_OneAPI_MulManyList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*APISequence_OneAPI_MulManyList::GetClassData() const { return &_class_data_; }


void APISequence_OneAPI_MulManyList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<APISequence_OneAPI_MulManyList*>(&to_msg);
  auto& from = static_cast<const APISequence_OneAPI_MulManyList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OpenFHE.APISequence.OneAPI.MulManyList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.srcs_.MergeFrom(from._impl_.srcs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void APISequence_OneAPI_MulManyList::CopyFrom(const APISequence_OneAPI_MulManyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpenFHE.APISequence.OneAPI.MulManyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APISequence_OneAPI_MulManyList::IsInitialized() const {
  return true;
}

void APISequence_OneAPI_MulManyList::InternalSwap(APISequence_OneAPI_MulManyList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.srcs_.InternalSwap(&other->_impl_.srcs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata APISequence_OneAPI_MulManyList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fopenfhe_5fckks_2eproto_getter, &descriptor_table_proto_2fopenfhe_5fckks_2eproto_once,
      file_level_metadata_proto_2fopenfhe_5fckks_2eproto[11]);
}

// ===================================================================

class APISequence_OneAPI_LinearWeightedSum::_Internal {
 public:
};

APISequence_OneAPI_LinearWeightedSum::APISequence_OneAPI_LinearWeightedSum(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:OpenFHE.APISequence.OneAPI.LinearWeightedSum)
}
APISequence_OneAPI_LinearWeightedSum::APISequence_OneAPI_LinearWeightedSum(const APISequence_OneAPI_LinearWeightedSum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  APISequence_OneAPI_LinearWeightedSum* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.srcs_){from._impl_.srcs_}
    , /*decltype(_impl_._srcs_cached_byte_size_)*/{0}
    , decltype(_impl_.weights_){from._impl_.weights_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OpenFHE.APISequence.OneAPI.LinearWeightedSum)
}

inline void APISequence_OneAPI_LinearWeightedSum::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.srcs_){arena}
    , /*decltype(_impl_._srcs_cached_byte_size_)*/{0}
    , decltype(_impl_.weights_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

APISequence_OneAPI_LinearWeightedSum::~APISequence_OneAPI_LinearWeightedSum() {
  // @@protoc_insertion_point(destructor:OpenFHE.APISequence.OneAPI.LinearWeightedSum)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void APISequence_OneAPI_LinearWeightedSum::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.srcs_.~RepeatedField();
  _impl_.weights_.~RepeatedField();
}

void APISequence_OneAPI_LinearWeightedSum::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void APISequence_OneAPI_LinearWeightedSum::Clear() {
// @@protoc_insertion_point(message_clear_start:OpenFHE.APISequence.OneAPI.LinearWeightedSum)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.srcs_.Clear();
  _impl_.weights_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APISequence_OneAPI_LinearWeightedSum::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 srcs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_srcs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_srcs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double weights = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_weights(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_weights(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* APISequence_OneAPI_LinearWeightedSum::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpenFHE.APISequence.OneAPI.LinearWeightedSum)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 srcs = 1;
  {
    int byte_size = _impl_._srcs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_srcs(), byte_size, target);
    }
  }

  // repeated double weights = 2;
  if (this->_internal_weights_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_weights(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpenFHE.APISequence.OneAPI.LinearWeightedSum)
  return target;
}

size_t APISequence_OneAPI_LinearWeightedSum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OpenFHE.APISequence.OneAPI.LinearWeightedSum)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 srcs = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.srcs_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._srcs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double weights = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_weights_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData APISequence_OneAPI_LinearWeightedSum::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    APISequence_OneAPI_LinearWeightedSum::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*APISequence_OneAPI_LinearWeightedSum::GetClassData() const { return &_class_data_; }


void APISequence_OneAPI_LinearWeightedSum::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<APISequence_OneAPI_LinearWeightedSum*>(&to_msg);
  auto& from = static_cast<const APISequence_OneAPI_LinearWeightedSum&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OpenFHE.APISequence.OneAPI.LinearWeightedSum)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.srcs_.MergeFrom(from._impl_.srcs_);
  _this->_impl_.weights_.MergeFrom(from._impl_.weights_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void APISequence_OneAPI_LinearWeightedSum::CopyFrom(const APISequence_OneAPI_LinearWeightedSum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpenFHE.APISequence.OneAPI.LinearWeightedSum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APISequence_OneAPI_LinearWeightedSum::IsInitialized() const {
  return true;
}

void APISequence_OneAPI_LinearWeightedSum::InternalSwap(APISequence_OneAPI_LinearWeightedSum* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.srcs_.InternalSwap(&other->_impl_.srcs_);
  _impl_.weights_.InternalSwap(&other->_impl_.weights_);
}

::PROTOBUF_NAMESPACE_ID::Metadata APISequence_OneAPI_LinearWeightedSum::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fopenfhe_5fckks_2eproto_getter, &descriptor_table_proto_2fopenfhe_5fckks_2eproto_once,
      file_level_metadata_proto_2fopenfhe_5fckks_2eproto[12]);
}

// ===================================================================

class APISequence_OneAPI_RotateOneList::_Internal {
 public:
};

APISequence_OneAPI_RotateOneList::APISequence_OneAPI_RotateOneList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:OpenFHE.APISequence.OneAPI.RotateOneList)
}
APISequence_OneAPI_RotateOneList::APISequence_OneAPI_RotateOneList(const APISequence_OneAPI_RotateOneList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  APISequence_OneAPI_RotateOneList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.src_, &from._impl_.src_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.index_) -
    reinterpret_cast<char*>(&_impl_.src_)) + sizeof(_impl_.index_));
  // @@protoc_insertion_point(copy_constructor:OpenFHE.APISequence.OneAPI.RotateOneList)
}

inline void APISequence_OneAPI_RotateOneList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.src_){0u}
    , decltype(_impl_.index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

APISequence_OneAPI_RotateOneList::~APISequence_OneAPI_RotateOneList() {
  // @@protoc_insertion_point(destructor:OpenFHE.APISequence.OneAPI.RotateOneList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void APISequence_OneAPI_RotateOneList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void APISequence_OneAPI_RotateOneList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void APISequence_OneAPI_RotateOneList::Clear() {
// @@protoc_insertion_point(message_clear_start:OpenFHE.APISequence.OneAPI.RotateOneList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.src_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.index_) -
      reinterpret_cast<char*>(&_impl_.src_)) + sizeof(_impl_.index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APISequence_OneAPI_RotateOneList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.src_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* APISequence_OneAPI_RotateOneList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpenFHE.APISequence.OneAPI.RotateOneList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 src = 1;
  if (this->_internal_src() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_src(), target);
  }

  // int32 index = 2;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpenFHE.APISequence.OneAPI.RotateOneList)
  return target;
}

size_t APISequence_OneAPI_RotateOneList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OpenFHE.APISequence.OneAPI.RotateOneList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 src = 1;
  if (this->_internal_src() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_src());
  }

  // int32 index = 2;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData APISequence_OneAPI_RotateOneList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    APISequence_OneAPI_RotateOneList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*APISequence_OneAPI_RotateOneList::GetClassData() const { return &_class_data_; }


void APISequence_OneAPI_RotateOneList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<APISequence_OneAPI_RotateOneList*>(&to_msg);
  auto& from = static_cast<const APISequence_OneAPI_RotateOneList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OpenFHE.APISequence.OneAPI.RotateOneList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_src() != 0) {
    _this->_internal_set_src(from._internal_src());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void APISequence_OneAPI_RotateOneList::CopyFrom(const APISequence_OneAPI_RotateOneList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpenFHE.APISequence.OneAPI.RotateOneList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APISequence_OneAPI_RotateOneList::IsInitialized() const {
  return true;
}

void APISequence_OneAPI_RotateOneList::InternalSwap(APISequence_OneAPI_RotateOneList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(APISequence_OneAPI_RotateOneList, _impl_.index_)
      + sizeof(APISequence_OneAPI_RotateOneList::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(APISequence_OneAPI_RotateOneList, _impl_.src_)>(
          reinterpret_cast<char*>(&_impl_.src_),
          reinterpret_cast<char*>(&other->_impl_.src_));
}

::PROTOBUF_NAMESPACE_ID::Metadata APISequence_OneAPI_RotateOneList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fopenfhe_5fckks_2eproto_getter, &descriptor_table_proto_2fopenfhe_5fckks_2eproto_once,
      file_level_metadata_proto_2fopenfhe_5fckks_2eproto[13]);
}

// ===================================================================

class APISequence_OneAPI::_Internal {
 public:
  static const ::OpenFHE::APISequence_OneAPI_AddTwoList& addtwolist(const APISequence_OneAPI* msg);
  static const ::OpenFHE::APISequence_OneAPI_AddConstant& addconstant(const APISequence_OneAPI* msg);
  static const ::OpenFHE::APISequence_OneAPI_AddManyList& addmanylist(const APISequence_OneAPI* msg);
  static const ::OpenFHE::APISequence_OneAPI_SubTwoList& subtwolist(const APISequence_OneAPI* msg);
  static const ::OpenFHE::APISequence_OneAPI_SubConstant& subconstant(const APISequence_OneAPI* msg);
  static const ::OpenFHE::APISequence_OneAPI_MulTwoList& multwolist(const APISequence_OneAPI* msg);
  static const ::OpenFHE::APISequence_OneAPI_MulConstant& mulconstant(const APISequence_OneAPI* msg);
  static const ::OpenFHE::APISequence_OneAPI_MulManyList& mulmanylist(const APISequence_OneAPI* msg);
  static const ::OpenFHE::APISequence_OneAPI_LinearWeightedSum& linearweightedsum(const APISequence_OneAPI* msg);
  static const ::OpenFHE::APISequence_OneAPI_RotateOneList& rotateonelist(const APISequence_OneAPI* msg);
};

const ::OpenFHE::APISequence_OneAPI_AddTwoList&
APISequence_OneAPI::_Internal::addtwolist(const APISequence_OneAPI* msg) {
  return *msg->_impl_.api_.addtwolist_;
}
const ::OpenFHE::APISequence_OneAPI_AddConstant&
APISequence_OneAPI::_Internal::addconstant(const APISequence_OneAPI* msg) {
  return *msg->_impl_.api_.addconstant_;
}
const ::OpenFHE::APISequence_OneAPI_AddManyList&
APISequence_OneAPI::_Internal::addmanylist(const APISequence_OneAPI* msg) {
  return *msg->_impl_.api_.addmanylist_;
}
const ::OpenFHE::APISequence_OneAPI_SubTwoList&
APISequence_OneAPI::_Internal::subtwolist(const APISequence_OneAPI* msg) {
  return *msg->_impl_.api_.subtwolist_;
}
const ::OpenFHE::APISequence_OneAPI_SubConstant&
APISequence_OneAPI::_Internal::subconstant(const APISequence_OneAPI* msg) {
  return *msg->_impl_.api_.subconstant_;
}
const ::OpenFHE::APISequence_OneAPI_MulTwoList&
APISequence_OneAPI::_Internal::multwolist(const APISequence_OneAPI* msg) {
  return *msg->_impl_.api_.multwolist_;
}
const ::OpenFHE::APISequence_OneAPI_MulConstant&
APISequence_OneAPI::_Internal::mulconstant(const APISequence_OneAPI* msg) {
  return *msg->_impl_.api_.mulconstant_;
}
const ::OpenFHE::APISequence_OneAPI_MulManyList&
APISequence_OneAPI::_Internal::mulmanylist(const APISequence_OneAPI* msg) {
  return *msg->_impl_.api_.mulmanylist_;
}
const ::OpenFHE::APISequence_OneAPI_LinearWeightedSum&
APISequence_OneAPI::_Internal::linearweightedsum(const APISequence_OneAPI* msg) {
  return *msg->_impl_.api_.linearweightedsum_;
}
const ::OpenFHE::APISequence_OneAPI_RotateOneList&
APISequence_OneAPI::_Internal::rotateonelist(const APISequence_OneAPI* msg) {
  return *msg->_impl_.api_.rotateonelist_;
}
void APISequence_OneAPI::set_allocated_addtwolist(::OpenFHE::APISequence_OneAPI_AddTwoList* addtwolist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_api();
  if (addtwolist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(addtwolist);
    if (message_arena != submessage_arena) {
      addtwolist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addtwolist, submessage_arena);
    }
    set_has_addtwolist();
    _impl_.api_.addtwolist_ = addtwolist;
  }
  // @@protoc_insertion_point(field_set_allocated:OpenFHE.APISequence.OneAPI.addTwoList)
}
void APISequence_OneAPI::set_allocated_addconstant(::OpenFHE::APISequence_OneAPI_AddConstant* addconstant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_api();
  if (addconstant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(addconstant);
    if (message_arena != submessage_arena) {
      addconstant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addconstant, submessage_arena);
    }
    set_has_addconstant();
    _impl_.api_.addconstant_ = addconstant;
  }
  // @@protoc_insertion_point(field_set_allocated:OpenFHE.APISequence.OneAPI.addConstant)
}
void APISequence_OneAPI::set_allocated_addmanylist(::OpenFHE::APISequence_OneAPI_AddManyList* addmanylist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_api();
  if (addmanylist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(addmanylist);
    if (message_arena != submessage_arena) {
      addmanylist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addmanylist, submessage_arena);
    }
    set_has_addmanylist();
    _impl_.api_.addmanylist_ = addmanylist;
  }
  // @@protoc_insertion_point(field_set_allocated:OpenFHE.APISequence.OneAPI.addManyList)
}
void APISequence_OneAPI::set_allocated_subtwolist(::OpenFHE::APISequence_OneAPI_SubTwoList* subtwolist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_api();
  if (subtwolist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subtwolist);
    if (message_arena != submessage_arena) {
      subtwolist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subtwolist, submessage_arena);
    }
    set_has_subtwolist();
    _impl_.api_.subtwolist_ = subtwolist;
  }
  // @@protoc_insertion_point(field_set_allocated:OpenFHE.APISequence.OneAPI.subTwoList)
}
void APISequence_OneAPI::set_allocated_subconstant(::OpenFHE::APISequence_OneAPI_SubConstant* subconstant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_api();
  if (subconstant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subconstant);
    if (message_arena != submessage_arena) {
      subconstant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subconstant, submessage_arena);
    }
    set_has_subconstant();
    _impl_.api_.subconstant_ = subconstant;
  }
  // @@protoc_insertion_point(field_set_allocated:OpenFHE.APISequence.OneAPI.subConstant)
}
void APISequence_OneAPI::set_allocated_multwolist(::OpenFHE::APISequence_OneAPI_MulTwoList* multwolist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_api();
  if (multwolist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(multwolist);
    if (message_arena != submessage_arena) {
      multwolist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multwolist, submessage_arena);
    }
    set_has_multwolist();
    _impl_.api_.multwolist_ = multwolist;
  }
  // @@protoc_insertion_point(field_set_allocated:OpenFHE.APISequence.OneAPI.mulTwoList)
}
void APISequence_OneAPI::set_allocated_mulconstant(::OpenFHE::APISequence_OneAPI_MulConstant* mulconstant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_api();
  if (mulconstant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mulconstant);
    if (message_arena != submessage_arena) {
      mulconstant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mulconstant, submessage_arena);
    }
    set_has_mulconstant();
    _impl_.api_.mulconstant_ = mulconstant;
  }
  // @@protoc_insertion_point(field_set_allocated:OpenFHE.APISequence.OneAPI.mulConstant)
}
void APISequence_OneAPI::set_allocated_mulmanylist(::OpenFHE::APISequence_OneAPI_MulManyList* mulmanylist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_api();
  if (mulmanylist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mulmanylist);
    if (message_arena != submessage_arena) {
      mulmanylist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mulmanylist, submessage_arena);
    }
    set_has_mulmanylist();
    _impl_.api_.mulmanylist_ = mulmanylist;
  }
  // @@protoc_insertion_point(field_set_allocated:OpenFHE.APISequence.OneAPI.mulManyList)
}
void APISequence_OneAPI::set_allocated_linearweightedsum(::OpenFHE::APISequence_OneAPI_LinearWeightedSum* linearweightedsum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_api();
  if (linearweightedsum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(linearweightedsum);
    if (message_arena != submessage_arena) {
      linearweightedsum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linearweightedsum, submessage_arena);
    }
    set_has_linearweightedsum();
    _impl_.api_.linearweightedsum_ = linearweightedsum;
  }
  // @@protoc_insertion_point(field_set_allocated:OpenFHE.APISequence.OneAPI.linearWeightedSum)
}
void APISequence_OneAPI::set_allocated_rotateonelist(::OpenFHE::APISequence_OneAPI_RotateOneList* rotateonelist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_api();
  if (rotateonelist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotateonelist);
    if (message_arena != submessage_arena) {
      rotateonelist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotateonelist, submessage_arena);
    }
    set_has_rotateonelist();
    _impl_.api_.rotateonelist_ = rotateonelist;
  }
  // @@protoc_insertion_point(field_set_allocated:OpenFHE.APISequence.OneAPI.rotateOneList)
}
APISequence_OneAPI::APISequence_OneAPI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:OpenFHE.APISequence.OneAPI)
}
APISequence_OneAPI::APISequence_OneAPI(const APISequence_OneAPI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  APISequence_OneAPI* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dst_){}
    , decltype(_impl_.api_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.dst_ = from._impl_.dst_;
  clear_has_api();
  switch (from.api_case()) {
    case kAddTwoList: {
      _this->_internal_mutable_addtwolist()->::OpenFHE::APISequence_OneAPI_AddTwoList::MergeFrom(
          from._internal_addtwolist());
      break;
    }
    case kAddConstant: {
      _this->_internal_mutable_addconstant()->::OpenFHE::APISequence_OneAPI_AddConstant::MergeFrom(
          from._internal_addconstant());
      break;
    }
    case kAddManyList: {
      _this->_internal_mutable_addmanylist()->::OpenFHE::APISequence_OneAPI_AddManyList::MergeFrom(
          from._internal_addmanylist());
      break;
    }
    case kSubTwoList: {
      _this->_internal_mutable_subtwolist()->::OpenFHE::APISequence_OneAPI_SubTwoList::MergeFrom(
          from._internal_subtwolist());
      break;
    }
    case kSubConstant: {
      _this->_internal_mutable_subconstant()->::OpenFHE::APISequence_OneAPI_SubConstant::MergeFrom(
          from._internal_subconstant());
      break;
    }
    case kMulTwoList: {
      _this->_internal_mutable_multwolist()->::OpenFHE::APISequence_OneAPI_MulTwoList::MergeFrom(
          from._internal_multwolist());
      break;
    }
    case kMulConstant: {
      _this->_internal_mutable_mulconstant()->::OpenFHE::APISequence_OneAPI_MulConstant::MergeFrom(
          from._internal_mulconstant());
      break;
    }
    case kMulManyList: {
      _this->_internal_mutable_mulmanylist()->::OpenFHE::APISequence_OneAPI_MulManyList::MergeFrom(
          from._internal_mulmanylist());
      break;
    }
    case kLinearWeightedSum: {
      _this->_internal_mutable_linearweightedsum()->::OpenFHE::APISequence_OneAPI_LinearWeightedSum::MergeFrom(
          from._internal_linearweightedsum());
      break;
    }
    case kRotateOneList: {
      _this->_internal_mutable_rotateonelist()->::OpenFHE::APISequence_OneAPI_RotateOneList::MergeFrom(
          from._internal_rotateonelist());
      break;
    }
    case API_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:OpenFHE.APISequence.OneAPI)
}

inline void APISequence_OneAPI::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dst_){0u}
    , decltype(_impl_.api_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_api();
}

APISequence_OneAPI::~APISequence_OneAPI() {
  // @@protoc_insertion_point(destructor:OpenFHE.APISequence.OneAPI)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void APISequence_OneAPI::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_api()) {
    clear_api();
  }
}

void APISequence_OneAPI::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void APISequence_OneAPI::clear_api() {
// @@protoc_insertion_point(one_of_clear_start:OpenFHE.APISequence.OneAPI)
  switch (api_case()) {
    case kAddTwoList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.api_.addtwolist_;
      }
      break;
    }
    case kAddConstant: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.api_.addconstant_;
      }
      break;
    }
    case kAddManyList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.api_.addmanylist_;
      }
      break;
    }
    case kSubTwoList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.api_.subtwolist_;
      }
      break;
    }
    case kSubConstant: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.api_.subconstant_;
      }
      break;
    }
    case kMulTwoList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.api_.multwolist_;
      }
      break;
    }
    case kMulConstant: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.api_.mulconstant_;
      }
      break;
    }
    case kMulManyList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.api_.mulmanylist_;
      }
      break;
    }
    case kLinearWeightedSum: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.api_.linearweightedsum_;
      }
      break;
    }
    case kRotateOneList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.api_.rotateonelist_;
      }
      break;
    }
    case API_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = API_NOT_SET;
}


void APISequence_OneAPI::Clear() {
// @@protoc_insertion_point(message_clear_start:OpenFHE.APISequence.OneAPI)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dst_ = 0u;
  clear_api();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APISequence_OneAPI::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .OpenFHE.APISequence.OneAPI.AddTwoList addTwoList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_addtwolist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .OpenFHE.APISequence.OneAPI.AddConstant addConstant = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_addconstant(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .OpenFHE.APISequence.OneAPI.AddManyList addManyList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_addmanylist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .OpenFHE.APISequence.OneAPI.SubTwoList subTwoList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_subtwolist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .OpenFHE.APISequence.OneAPI.SubConstant subConstant = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_subconstant(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .OpenFHE.APISequence.OneAPI.MulTwoList mulTwoList = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_multwolist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .OpenFHE.APISequence.OneAPI.MulConstant mulConstant = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_mulconstant(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .OpenFHE.APISequence.OneAPI.MulManyList mulManyList = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_mulmanylist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .OpenFHE.APISequence.OneAPI.LinearWeightedSum linearWeightedSum = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_linearweightedsum(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .OpenFHE.APISequence.OneAPI.RotateOneList rotateOneList = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotateonelist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dst = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.dst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* APISequence_OneAPI::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpenFHE.APISequence.OneAPI)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .OpenFHE.APISequence.OneAPI.AddTwoList addTwoList = 1;
  if (_internal_has_addtwolist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::addtwolist(this),
        _Internal::addtwolist(this).GetCachedSize(), target, stream);
  }

  // .OpenFHE.APISequence.OneAPI.AddConstant addConstant = 2;
  if (_internal_has_addconstant()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::addconstant(this),
        _Internal::addconstant(this).GetCachedSize(), target, stream);
  }

  // .OpenFHE.APISequence.OneAPI.AddManyList addManyList = 3;
  if (_internal_has_addmanylist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::addmanylist(this),
        _Internal::addmanylist(this).GetCachedSize(), target, stream);
  }

  // .OpenFHE.APISequence.OneAPI.SubTwoList subTwoList = 4;
  if (_internal_has_subtwolist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::subtwolist(this),
        _Internal::subtwolist(this).GetCachedSize(), target, stream);
  }

  // .OpenFHE.APISequence.OneAPI.SubConstant subConstant = 5;
  if (_internal_has_subconstant()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::subconstant(this),
        _Internal::subconstant(this).GetCachedSize(), target, stream);
  }

  // .OpenFHE.APISequence.OneAPI.MulTwoList mulTwoList = 6;
  if (_internal_has_multwolist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::multwolist(this),
        _Internal::multwolist(this).GetCachedSize(), target, stream);
  }

  // .OpenFHE.APISequence.OneAPI.MulConstant mulConstant = 7;
  if (_internal_has_mulconstant()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::mulconstant(this),
        _Internal::mulconstant(this).GetCachedSize(), target, stream);
  }

  // .OpenFHE.APISequence.OneAPI.MulManyList mulManyList = 8;
  if (_internal_has_mulmanylist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::mulmanylist(this),
        _Internal::mulmanylist(this).GetCachedSize(), target, stream);
  }

  // .OpenFHE.APISequence.OneAPI.LinearWeightedSum linearWeightedSum = 9;
  if (_internal_has_linearweightedsum()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::linearweightedsum(this),
        _Internal::linearweightedsum(this).GetCachedSize(), target, stream);
  }

  // .OpenFHE.APISequence.OneAPI.RotateOneList rotateOneList = 10;
  if (_internal_has_rotateonelist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::rotateonelist(this),
        _Internal::rotateonelist(this).GetCachedSize(), target, stream);
  }

  // uint32 dst = 11;
  if (this->_internal_dst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_dst(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpenFHE.APISequence.OneAPI)
  return target;
}

size_t APISequence_OneAPI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OpenFHE.APISequence.OneAPI)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 dst = 11;
  if (this->_internal_dst() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dst());
  }

  switch (api_case()) {
    // .OpenFHE.APISequence.OneAPI.AddTwoList addTwoList = 1;
    case kAddTwoList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.api_.addtwolist_);
      break;
    }
    // .OpenFHE.APISequence.OneAPI.AddConstant addConstant = 2;
    case kAddConstant: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.api_.addconstant_);
      break;
    }
    // .OpenFHE.APISequence.OneAPI.AddManyList addManyList = 3;
    case kAddManyList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.api_.addmanylist_);
      break;
    }
    // .OpenFHE.APISequence.OneAPI.SubTwoList subTwoList = 4;
    case kSubTwoList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.api_.subtwolist_);
      break;
    }
    // .OpenFHE.APISequence.OneAPI.SubConstant subConstant = 5;
    case kSubConstant: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.api_.subconstant_);
      break;
    }
    // .OpenFHE.APISequence.OneAPI.MulTwoList mulTwoList = 6;
    case kMulTwoList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.api_.multwolist_);
      break;
    }
    // .OpenFHE.APISequence.OneAPI.MulConstant mulConstant = 7;
    case kMulConstant: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.api_.mulconstant_);
      break;
    }
    // .OpenFHE.APISequence.OneAPI.MulManyList mulManyList = 8;
    case kMulManyList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.api_.mulmanylist_);
      break;
    }
    // .OpenFHE.APISequence.OneAPI.LinearWeightedSum linearWeightedSum = 9;
    case kLinearWeightedSum: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.api_.linearweightedsum_);
      break;
    }
    // .OpenFHE.APISequence.OneAPI.RotateOneList rotateOneList = 10;
    case kRotateOneList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.api_.rotateonelist_);
      break;
    }
    case API_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData APISequence_OneAPI::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    APISequence_OneAPI::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*APISequence_OneAPI::GetClassData() const { return &_class_data_; }


void APISequence_OneAPI::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<APISequence_OneAPI*>(&to_msg);
  auto& from = static_cast<const APISequence_OneAPI&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OpenFHE.APISequence.OneAPI)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_dst() != 0) {
    _this->_internal_set_dst(from._internal_dst());
  }
  switch (from.api_case()) {
    case kAddTwoList: {
      _this->_internal_mutable_addtwolist()->::OpenFHE::APISequence_OneAPI_AddTwoList::MergeFrom(
          from._internal_addtwolist());
      break;
    }
    case kAddConstant: {
      _this->_internal_mutable_addconstant()->::OpenFHE::APISequence_OneAPI_AddConstant::MergeFrom(
          from._internal_addconstant());
      break;
    }
    case kAddManyList: {
      _this->_internal_mutable_addmanylist()->::OpenFHE::APISequence_OneAPI_AddManyList::MergeFrom(
          from._internal_addmanylist());
      break;
    }
    case kSubTwoList: {
      _this->_internal_mutable_subtwolist()->::OpenFHE::APISequence_OneAPI_SubTwoList::MergeFrom(
          from._internal_subtwolist());
      break;
    }
    case kSubConstant: {
      _this->_internal_mutable_subconstant()->::OpenFHE::APISequence_OneAPI_SubConstant::MergeFrom(
          from._internal_subconstant());
      break;
    }
    case kMulTwoList: {
      _this->_internal_mutable_multwolist()->::OpenFHE::APISequence_OneAPI_MulTwoList::MergeFrom(
          from._internal_multwolist());
      break;
    }
    case kMulConstant: {
      _this->_internal_mutable_mulconstant()->::OpenFHE::APISequence_OneAPI_MulConstant::MergeFrom(
          from._internal_mulconstant());
      break;
    }
    case kMulManyList: {
      _this->_internal_mutable_mulmanylist()->::OpenFHE::APISequence_OneAPI_MulManyList::MergeFrom(
          from._internal_mulmanylist());
      break;
    }
    case kLinearWeightedSum: {
      _this->_internal_mutable_linearweightedsum()->::OpenFHE::APISequence_OneAPI_LinearWeightedSum::MergeFrom(
          from._internal_linearweightedsum());
      break;
    }
    case kRotateOneList: {
      _this->_internal_mutable_rotateonelist()->::OpenFHE::APISequence_OneAPI_RotateOneList::MergeFrom(
          from._internal_rotateonelist());
      break;
    }
    case API_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void APISequence_OneAPI::CopyFrom(const APISequence_OneAPI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpenFHE.APISequence.OneAPI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APISequence_OneAPI::IsInitialized() const {
  return true;
}

void APISequence_OneAPI::InternalSwap(APISequence_OneAPI* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.dst_, other->_impl_.dst_);
  swap(_impl_.api_, other->_impl_.api_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata APISequence_OneAPI::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fopenfhe_5fckks_2eproto_getter, &descriptor_table_proto_2fopenfhe_5fckks_2eproto_once,
      file_level_metadata_proto_2fopenfhe_5fckks_2eproto[14]);
}

// ===================================================================

class APISequence::_Internal {
 public:
};

APISequence::APISequence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:OpenFHE.APISequence)
}
APISequence::APISequence(const APISequence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  APISequence* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.apilist_){from._impl_.apilist_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OpenFHE.APISequence)
}

inline void APISequence::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.apilist_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

APISequence::~APISequence() {
  // @@protoc_insertion_point(destructor:OpenFHE.APISequence)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void APISequence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.apilist_.~RepeatedPtrField();
}

void APISequence::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void APISequence::Clear() {
// @@protoc_insertion_point(message_clear_start:OpenFHE.APISequence)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.apilist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* APISequence::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .OpenFHE.APISequence.OneAPI apiList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apilist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* APISequence::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpenFHE.APISequence)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .OpenFHE.APISequence.OneAPI apiList = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_apilist_size()); i < n; i++) {
    const auto& repfield = this->_internal_apilist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpenFHE.APISequence)
  return target;
}

size_t APISequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OpenFHE.APISequence)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OpenFHE.APISequence.OneAPI apiList = 1;
  total_size += 1UL * this->_internal_apilist_size();
  for (const auto& msg : this->_impl_.apilist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData APISequence::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    APISequence::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*APISequence::GetClassData() const { return &_class_data_; }


void APISequence::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<APISequence*>(&to_msg);
  auto& from = static_cast<const APISequence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OpenFHE.APISequence)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.apilist_.MergeFrom(from._impl_.apilist_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void APISequence::CopyFrom(const APISequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OpenFHE.APISequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APISequence::IsInitialized() const {
  return true;
}

void APISequence::InternalSwap(APISequence* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.apilist_.InternalSwap(&other->_impl_.apilist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata APISequence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fopenfhe_5fckks_2eproto_getter, &descriptor_table_proto_2fopenfhe_5fckks_2eproto_once,
      file_level_metadata_proto_2fopenfhe_5fckks_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace OpenFHE
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::OpenFHE::OpenFHE_RootMsg*
Arena::CreateMaybeMessage< ::OpenFHE::OpenFHE_RootMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OpenFHE::OpenFHE_RootMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::OpenFHE::FHEParameter*
Arena::CreateMaybeMessage< ::OpenFHE::FHEParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OpenFHE::FHEParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::OpenFHE::EvalData_OneDataList*
Arena::CreateMaybeMessage< ::OpenFHE::EvalData_OneDataList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OpenFHE::EvalData_OneDataList >(arena);
}
template<> PROTOBUF_NOINLINE ::OpenFHE::EvalData*
Arena::CreateMaybeMessage< ::OpenFHE::EvalData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OpenFHE::EvalData >(arena);
}
template<> PROTOBUF_NOINLINE ::OpenFHE::APISequence_OneAPI_AddTwoList*
Arena::CreateMaybeMessage< ::OpenFHE::APISequence_OneAPI_AddTwoList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OpenFHE::APISequence_OneAPI_AddTwoList >(arena);
}
template<> PROTOBUF_NOINLINE ::OpenFHE::APISequence_OneAPI_AddConstant*
Arena::CreateMaybeMessage< ::OpenFHE::APISequence_OneAPI_AddConstant >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OpenFHE::APISequence_OneAPI_AddConstant >(arena);
}
template<> PROTOBUF_NOINLINE ::OpenFHE::APISequence_OneAPI_AddManyList*
Arena::CreateMaybeMessage< ::OpenFHE::APISequence_OneAPI_AddManyList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OpenFHE::APISequence_OneAPI_AddManyList >(arena);
}
template<> PROTOBUF_NOINLINE ::OpenFHE::APISequence_OneAPI_SubTwoList*
Arena::CreateMaybeMessage< ::OpenFHE::APISequence_OneAPI_SubTwoList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OpenFHE::APISequence_OneAPI_SubTwoList >(arena);
}
template<> PROTOBUF_NOINLINE ::OpenFHE::APISequence_OneAPI_SubConstant*
Arena::CreateMaybeMessage< ::OpenFHE::APISequence_OneAPI_SubConstant >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OpenFHE::APISequence_OneAPI_SubConstant >(arena);
}
template<> PROTOBUF_NOINLINE ::OpenFHE::APISequence_OneAPI_MulTwoList*
Arena::CreateMaybeMessage< ::OpenFHE::APISequence_OneAPI_MulTwoList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OpenFHE::APISequence_OneAPI_MulTwoList >(arena);
}
template<> PROTOBUF_NOINLINE ::OpenFHE::APISequence_OneAPI_MulConstant*
Arena::CreateMaybeMessage< ::OpenFHE::APISequence_OneAPI_MulConstant >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OpenFHE::APISequence_OneAPI_MulConstant >(arena);
}
template<> PROTOBUF_NOINLINE ::OpenFHE::APISequence_OneAPI_MulManyList*
Arena::CreateMaybeMessage< ::OpenFHE::APISequence_OneAPI_MulManyList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OpenFHE::APISequence_OneAPI_MulManyList >(arena);
}
template<> PROTOBUF_NOINLINE ::OpenFHE::APISequence_OneAPI_LinearWeightedSum*
Arena::CreateMaybeMessage< ::OpenFHE::APISequence_OneAPI_LinearWeightedSum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OpenFHE::APISequence_OneAPI_LinearWeightedSum >(arena);
}
template<> PROTOBUF_NOINLINE ::OpenFHE::APISequence_OneAPI_RotateOneList*
Arena::CreateMaybeMessage< ::OpenFHE::APISequence_OneAPI_RotateOneList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OpenFHE::APISequence_OneAPI_RotateOneList >(arena);
}
template<> PROTOBUF_NOINLINE ::OpenFHE::APISequence_OneAPI*
Arena::CreateMaybeMessage< ::OpenFHE::APISequence_OneAPI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OpenFHE::APISequence_OneAPI >(arena);
}
template<> PROTOBUF_NOINLINE ::OpenFHE::APISequence*
Arena::CreateMaybeMessage< ::OpenFHE::APISequence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OpenFHE::APISequence >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
